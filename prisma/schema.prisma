// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int           @id @default(autoincrement())
  username  String        @unique
  password  String
  type      AccountType
  status    AccountStatus
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  admin     Admin?
  company   Company?
  member    Member?
  otp       OtpProvider?

  @@map("accounts")
}

model OtpProvider {
  id        Int       @id @default(autoincrement())
  updatedAt DateTime? @updatedAt @map("updated_at")
  otpCode   String?   @map("otp_code")
  accountId Int       @unique @map("account_id")
  account   Account   @relation(fields: [accountId], references: [id])

  @@map("otp_providers")
}

model Admin {
  id          Int          @id @default(autoincrement())
  name        String
  level       AdminLevel
  accountId   Int          @unique @map("account_id")
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  permissions Permission[]
  account     Account      @relation(fields: [accountId], references: [id])

  @@map("admins")
}

model Member {
  id                           Int                           @id @default(autoincrement())
  name                         String
  accountId                    Int                           @unique @map("account_id")
  isActive                     Boolean                       @default(true)
  createdAt                    DateTime                      @default(now()) @map("created_at")
  updatedAt                    DateTime                      @updatedAt @map("updated_at")
  contact                      String
  email                        String                        @unique
  desiredOccupation            String?                       @map("desired_occupation")
  signupMethod                 SignupMethodType              @map("signup_method")
  level                        MemberLevel
  withdrawnDate                DateTime?                     @map("withdrawn_date") @db.Date
  authenticationDate           DateTime?                     @map("authentication_date") @db.Date
  certificates                 Certificate[]
  account                      Account                       @relation(fields: [accountId], references: [id])
  teams                        MembersOnTeams[]
  leader                       Team[]
  foreignWorker                ForeignWorker?
  bankAccount                  BankAccount?
  disability                   Disability?
  basicHealthSafetyCertificate BasicHealthSafetyCertificate?

  @@map("members")
}

model Company {
  id                 Int         @id @default(autoincrement())
  accountId          Int         @unique @map("account_id")
  account            Account     @relation(fields: [accountId], references: [id])
  name               String
  address            String
  estDate            DateTime    @map("est_date")
  businessRegNumber  String      @unique @map("buss_reg_number")
  corporateRegNumber String      @unique @map("corp_reg_number")
  type               CompanyType
  email              String      @unique
  phone              String
  presentativeName   String      @map("pres_name")
  contactPhone       String      @map("contact_phone")
  contactName        String      @map("contact_name")
  isActive           Boolean     @default(true)
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")

  @@map("companies")
}

model Team {
  id        Int              @id @default(autoincrement())
  code      String
  name      String
  leaderId  Int              @map("leader_id")
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    TeamStatus
  members   MembersOnTeams[]
  leader    Member           @relation(fields: [leaderId], references: [id])

  @@map("teams")
}

model MembersOnTeams {
  teamId    Int      @map("team_id")
  memberId  Int      @map("member_id")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  member    Member   @relation(fields: [memberId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@id([memberId, teamId])
  @@map("members_on_teams")
}

model ForeignWorker {
  id                 Int      @id @default(autoincrement())
  englishName        String
  registrationNumber String
  serialNumber       String
  dateOfIssue        DateTime @db.Date
  memberId           Int      @unique @map("member_id")
  member             Member   @relation(fields: [memberId], references: [id])
  fileId             Int      @unique
  file               File     @relation(fields: [fileId], references: [id])

  @@map("foreign_workers")
}

model BankAccount {
  id            Int    @id @default(autoincrement())
  accountHolder String
  accountNumber String
  bankName      String
  memberId      Int    @unique @map("member_id")
  member        Member @relation(fields: [memberId], references: [id])

  @@map("bank_accounts")
}

model Disability {
  id          Int          @id @default(autoincrement())
  disableType DisabledType
  memberId    Int          @unique
  member      Member       @relation(fields: [memberId], references: [id])
  fileId      Int          @unique
  file        File         @relation(fields: [fileId], references: [id])

  @@map("disabilities")
}

model BasicHealthSafetyCertificate {
  id                 Int      @id @default(autoincrement())
  registrationNumber String
  dateOfCompletion   DateTime @db.Date
  memberId           Int      @unique
  member             Member   @relation(fields: [memberId], references: [id])
  fileId             Int      @unique
  file               File     @relation(fields: [fileId], references: [id])

  @@map("h_s_edu_certificate")
}

model File {
  id                           Int                           @id @default(autoincrement())
  type                         FileType
  key                          String?
  fileName                     String?                       @map("file_name")
  size                         BigInt
  isDeactivated                Boolean                       @default(false) @map("is_deactivated")
  createdAt                    DateTime                      @default(now()) @map("created_at")
  updatedAt                    DateTime                      @updatedAt @map("updated_at")
  Disability                   Disability?
  ForeignWorker                ForeignWorker?
  BasicHealthSafetyCertificate BasicHealthSafetyCertificate?

  @@map("files")
}

model Permission {
  id         Int      @id @default(autoincrement())
  adminId    Int      @map("admin_id")
  admin      Admin    @relation(fields: [adminId], references: [id])
  functionId Int      @unique @map("function_id")
  function   Function @relation(fields: [functionId], references: [id])

  @@map("permissions")
}

model Function {
  id         Int          @id @default(autoincrement())
  name       FunctionName
  permission Permission?
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  @@map("functions")
}

model Certificate {
  id              Int               @id @default(autoincrement())
  name            String
  photo           String
  status          CertificateStatus
  acquisitionDate DateTime          @map("acquisition_date")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  memberId        Int               @map("member_id")
  member          Member            @relation(fields: [memberId], references: [id])

  @@map("certificates")
}

enum FunctionName {
  MEMBER_MANAGEMENT
  TEAM_MANAGEMENT
  COMPANY_LIST
  SPECIAL_APPLICATION
  CERTIFICATION_APPLICATION
  DISABLED_REGISTRATION
  CAREER_REGISTRATION
  SITE_APPLICATION
  ANNOUNCEMENT_MANAGEMENT
  GENERAL_SUPPORT_MANAGEMENT
  MATCHING_SETTING_MANAGEMENT
  MATCHING_SETTING
  HEADHUNTING_REQUEST
  HEADHUNTING_MANAGEMENT
  HEADHUNTING_MANPOWER
  CONTRACT_MANAGEMENT
  EVALUATION_MANAGEMENT
  PRODUCT_PAYMENT_MANAGEMENT
  PRODUCT_POSSESSION_STATUS
  PRODUCT_USAGE_STATUS
  REFUND_MANAGEMENT
  SETTLEMENT_MANAGEMENT
  POINT_MANAGEMENT
  BANNER_MANAGEMENT
  PRODUCT_BANNER_MANAGEMENT
  PRODUCT_BANNER_INQUIRY
  CODE_MANAGEMENT
  ADVERTISING_BANNER_MANAGEMENT
  ANNOUNCEMENTS
  FAQ
  INQUIRY
  TERMS_AND_CONDITIONS
  LABOR_CONSULTATION_MANAGEMENT
  REPORT_MANAGEMENT
  SALARY_REPORT_PROXY_APPLICATION
  ADMINISTRATOR_MANAGEMENT
}

enum AccountType {
  ADMIN
  COMPANY
  MEMBER
}

enum AccountStatus {
  PENDING
  APPROVED
  SUSPENDED
  WITHDRAWN
}

enum AdminLevel {
  SUPERADMIN
  GENERAL
}

enum AuthenticationProviderType {
  KAKAO
  NAVER
  GOOGLE
  APPLE
  FACEBOOK
}

enum MemberLevel {
  PLATINUM
  GOLD
  SILVER
  TWO
  THREE
}

enum CompanyType {
  CORPORATION
  INDIVIDUAL
  OTHER
}

enum FileType {
  PDF
  ZIP
  RAR
  JPEG
  PNG
  CSV
  EXCEL
  WORD
}

enum TeamStatus {
  GENERAL
  STOPPED
  NOT_EXPOSED
  WAITING_ACTIVITY
  DELETED
}

enum DisabledType {
  DISABLED
  NONE
  MODERATE
}

enum CertificateStatus {
  REQUESTING
  REJECTED
  APPROVED
  REAPPLY
}

enum SignupMethodType {
  GENERAL
  GOOGLE
  APPLE
  KAKAO
  NAVER
}
