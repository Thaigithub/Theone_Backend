// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                   Int                    @id @default(autoincrement())
  username             String                 @unique
  password             String
  type                 AccountType
  status               AccountStatus
  isActive             Boolean                @default(true) @map("is_active")
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  lastAccessAt         DateTime               @default(now()) @map("last_access_at")
  admin                Admin?
  company              Company?
  member               Member?
  otps                 OtpProvider[]
  AccountStatusHistory AccountStatusHistory[]

  @@map("accounts")
}

model AccountStatusHistory {
  id        Int           @id @default(autoincrement())
  isActive  Boolean       @default(true) @map("is_active")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  status    AccountStatus
  message   String
  Account   Account       @relation(fields: [accountId], references: [id])
  accountId Int           @map("account_id")

  @@map("account_status_history")
}

model OtpProvider {
  id        Int       @id @default(autoincrement())
  updatedAt DateTime? @updatedAt @map("updated_at")
  otpCode   String?   @map("otp_code")
  checked   Boolean   @default(false)
  accountId Int       @map("account_id")
  account   Account   @relation(fields: [accountId], references: [id])
  otpType   OtpType   @map("otp_type")

  @@map("otp_providers")
}

model Admin {
  id          Int          @id @default(autoincrement())
  name        String
  level       AdminLevel
  accountId   Int          @unique @map("account_id")
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  permissions Permission[]
  account     Account      @relation(fields: [accountId], references: [id])

  @@map("admins")
}

model Member {
  id                           Int                           @id @default(autoincrement())
  name                         String
  accountId                    Int                           @unique @map("account_id")
  isActive                     Boolean                       @default(true) @map("is_active")
  createdAt                    DateTime                      @default(now()) @map("created_at")
  updatedAt                    DateTime                      @updatedAt @map("updated_at")
  contact                      String?
  email                        String?                       @unique
  desiredOccupation            String?                       @map("desired_occupation")
  signupMethod                 SignupMethodType              @map("signup_method")
  level                        MemberLevel
  withdrawnDate                DateTime?                     @map("withdrawn_date") @db.Date
  authenticationDate           DateTime?                     @map("authentication_date") @db.Date
  certificates                 Certificate[]
  specialLicenses              SpecialLicense[]
  account                      Account                       @relation(fields: [accountId], references: [id])
  teams                        MembersOnTeams[]
  leader                       Team[]
  foreignWorker                ForeignWorker?
  bankAccount                  BankAccount?
  disability                   Disability?
  basicHealthSafetyCertificate BasicHealthSafetyCertificate?
  Career                       Career[]
  SiteEvaluationByMember       SiteEvaluationByMember?
  InterestSites                Interest[]
  ApplyPosts                   Application[]
  MemberEvaluation             MemberEvaluation?

  @@map("members")
}

model Company {
  id                 Int          @id @default(autoincrement())
  accountId          Int          @unique @map("account_id")
  account            Account      @relation(fields: [accountId], references: [id])
  name               String
  address            String
  longitude          Float
  latitude           Float
  estDate            DateTime     @map("est_date")
  businessRegNumber  String       @unique @map("buss_reg_number")
  corporateRegNumber String       @unique @map("corp_reg_number")
  type               CompanyType
  email              String       @unique
  phone              String
  presentativeName   String       @map("pres_name")
  contactPhone       String       @map("contact_phone")
  contactName        String       @map("contact_name")
  isActive           Boolean      @default(true) @map("is_active")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  sites              Site[]
  logo               Logo?
  contactCard        ContactCard?

  @@map("companies")
}

model Logo {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id])
  fileId    Int     @unique
  file      File    @relation(fields: [fileId], references: [id])

  @@map("logos")
}

model ContactCard {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation(fields: [companyId], references: [id])
  fileId    Int     @unique
  file      File    @relation(fields: [fileId], references: [id])

  @@map("contact_cards")
}

model Team {
  id                   Int              @id @default(autoincrement())
  code                 String?
  name                 String
  introduction         String?
  leaderId             Int              @map("leader_id")
  isActive             Boolean          @default(true) @map("is_active")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")
  status               TeamStatus       @default(GENERAL)
  members              MembersOnTeams[]
  totalMembers         Int              @default(0) @map("total_members")
  leader               Member           @relation(fields: [leaderId], references: [id])
  fileId               Int              @unique @map("file_id")
  file                 File             @relation(fields: [fileId], references: [id])
  exposureStatus       Boolean          @default(false) @map("exposure_status")
  numberOfRecruitments Int              @default(0) @map("number_of_recruitments")
  TeamEvaluation       TeamEvaluation?
  posts                Application[]

  @@map("teams")
}

model MembersOnTeams {
  teamId    Int      @map("team_id")
  memberId  Int      @map("member_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  member    Member   @relation(fields: [memberId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@id([memberId, teamId])
  @@map("members_on_teams")
}

model ForeignWorker {
  id                 Int      @id @default(autoincrement())
  englishName        String   @map("english_name")
  registrationNumber String   @map("registration_number")
  serialNumber       String   @map("serial_number")
  dateOfIssue        DateTime @map("date_of_issue") @db.Date
  memberId           Int      @unique @map("member_id")
  member             Member   @relation(fields: [memberId], references: [id])
  fileId             Int      @unique @map("file_id")
  file               File     @relation(fields: [fileId], references: [id])
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@map("foreign_workers")
}

model BankAccount {
  id            Int      @id @default(autoincrement())
  accountHolder String   @map("account_holder")
  accountNumber String   @map("account_number")
  bankName      String   @map("bank_name")
  memberId      Int      @unique @map("member_id")
  member        Member   @relation(fields: [memberId], references: [id])
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("bank_accounts")
}

model Disability {
  id           Int           @id @default(autoincrement())
  disableType  DisabledType  @map("disable_type")
  disableLevel DisabledLevel
  memberId     Int           @unique @map("member_id")
  member       Member        @relation(fields: [memberId], references: [id])
  fileId       Int           @unique @map("file_id")
  file         File          @relation(fields: [fileId], references: [id])
  isActive     Boolean       @default(true) @map("is_active")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@map("disabilities")
}

model BasicHealthSafetyCertificate {
  id                 Int      @id @default(autoincrement())
  registrationNumber String   @map("registration_number")
  dateOfCompletion   DateTime @map("date_of_completion") @db.Date
  memberId           Int      @unique @map("member_id")
  member             Member   @relation(fields: [memberId], references: [id])
  fileId             Int      @unique @map("file_id")
  file               File     @relation(fields: [fileId], references: [id])
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@map("hst_certificates")
}

model File {
  id                           Int                           @id @default(autoincrement())
  type                         FileType
  key                          String?
  fileName                     String?                       @map("file_name")
  size                         BigInt
  isDeactivated                Boolean                       @default(false) @map("is_deactivated")
  createdAt                    DateTime                      @default(now()) @map("created_at")
  updatedAt                    DateTime                      @updatedAt @map("updated_at")
  Disability                   Disability?
  ForeignWorker                ForeignWorker?
  BasicHealthSafetyCertificate BasicHealthSafetyCertificate?
  Certificate                  Certificate?
  Banner                       Banner?
  specialLicense               SpecialLicense?
  team                         Team?
  Logo                         Logo?
  ContactCard                  ContactCard?

  @@map("files")
}

model Permission {
  adminId    Int      @map("admin_id")
  admin      Admin    @relation(fields: [adminId], references: [id])
  functionId Int      @map("function_id")
  function   Function @relation(fields: [functionId], references: [id])

  @@id([adminId, functionId])
  @@map("permissions")
}

model Function {
  id         Int          @id @default(autoincrement())
  name       FunctionName
  permission Permission[]
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  @@map("functions")
}

model Certificate {
  id                Int               @id @default(autoincrement())
  name              String
  status            CertificateStatus @default(REQUESTING)
  certificateNumber String            @map("certificate_number")
  acquisitionDate   DateTime          @map("acquisition_date")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  memberId          Int               @map("member_id")
  member            Member            @relation(fields: [memberId], references: [id])
  fileId            Int               @unique @map("file_id")
  file              File              @relation(fields: [fileId], references: [id])
  isSpecial         Boolean           @default(false)

  @@map("certificates")
}

model SpecialLicense {
  id              Int               @id @default(autoincrement())
  name            String
  status          CertificateStatus @default(REQUESTING)
  licenseNumber   String            @map("license_number")
  acquisitionDate DateTime          @map("acquisition_date")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  memberId        Int               @map("member_id")
  member          Member            @relation(fields: [memberId], references: [id])
  fileId          Int               @unique @map("file_id")
  file            File              @relation(fields: [fileId], references: [id])

  @@map("specialLicense")
}

model Career {
  id            Int        @id @default(autoincrement())
  companyName   String     @map("company_name")
  siteName      String     @map("site_name")
  startDate     DateTime   @map("start_date")
  endDate       DateTime   @map("end_date")
  type          CareerType
  isExperienced Boolean    @map("is_experienced")
  occupation    String
  isActive      Boolean    @default(true) @map("is_active")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  memberId      Int        @map("member_id")
  member        Member     @relation(fields: [memberId], references: [id])

  @@map("careers")
}

model Banner {
  id            Int            @id @default(autoincrement())
  generalBanner GeneralBanner?
  postBanner    PostBanner?
  siteBanner    SiteBanner?
  status        BannerStatus   @default(value: EXPOSE)
  fileId        Int            @unique
  file          File           @relation(fields: [fileId], references: [id])
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
}

model GeneralBanner {
  id        Int      @unique
  banner    Banner   @relation(fields: [id], references: [id])
  urlLink   String
  title     String
  startDate DateTime @map("start_date") @db.Date
  endDate   DateTime @map("end_date") @db.Date
  regDate   DateTime @default(now()) @map("register_date") @db.Date
  priority  Int?
}

model PostBanner {
  id                Int                @unique
  banner            Banner             @relation(fields: [id], references: [id])
  postId            Int
  post              Post               @relation(fields: [postId], references: [id])
  type              PostBannerType
  companyPostBanner CompanyPostBanner?
  adminPostBanner   AdminPostBanner?
}

model CompanyPostBanner {
  id               Int                 @unique
  postBanner       PostBanner          @relation(fields: [id], references: [id])
  requestDate      DateTime            @map("request_date") @db.Date
  acceptDate       DateTime?           @map("accept_date") @db.Date
  desiredStartDate DateTime            @map("desired_start_date") @db.Date
  desiredEndDate   DateTime            @map("desired_end_date") @db.Date
  priority         Int?
  status           RequestBannerStatus
}

model AdminPostBanner {
  id         Int        @unique
  postBanner PostBanner @relation(fields: [id], references: [id])
  urlLink    String
  startDate  DateTime   @map("start_date") @db.Date
  endDate    DateTime   @map("end_date") @db.Date
  regDate    DateTime   @map("register_date") @db.Date
  priority   Int?       @unique
}

model SiteBanner {
  id               Int                 @unique
  banner           Banner              @relation(fields: [id], references: [id])
  siteId           Int
  site             Site                @relation(fields: [siteId], references: [id])
  title            String
  requestDate      DateTime            @map("request_date") @db.Date
  acceptDate       DateTime?           @map("accept_date") @db.Date
  desiredStartDate DateTime            @map("desired_start_date") @db.Date
  desiredEndDate   DateTime            @map("desired_end_date") @db.Date
  priority         Int?                @unique
  status           RequestBannerStatus
}

enum BannerStatus {
  HIDE
  EXPOSE
}

enum RequestBannerStatus {
  PENDING
  DENY
  APPROVED
  REAPPLY
}

enum PostBannerType {
  ADMIN
  COMPANY
}

model Code {
  id        Int      @id @default(autoincrement())
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  code      String   @unique
  codeName  String   @map("code_name")
  codeType  CodeType @map("code_type")
  asSpecial Post[]   @relation(name: "post_special")
  asJob     Post[]   @relation(name: "post_occupation")

  @@map("codes")
}

model Site {
  id                        Int                        @id @default(autoincrement())
  isActive                  Boolean                    @default(true) @map("is_active")
  createdAt                 DateTime                   @default(now()) @map("created_at")
  updatedAt                 DateTime                   @updatedAt @map("updated_at")
  name                      String
  address                   String
  longitude                 Float
  latitude                  Float
  contact                   String
  personInCharge            String                     @map("person_in_charge")
  personInChargeContact     String                     @map("person_in_charge_contact")
  email                     String
  taxInvoiceEmail           String                     @map("tax_invoice_email")
  siteManagementNumber      String                     @map("site_management_number")
  contractStatus            ContractStatus             @map("contract_status")
  startDate                 DateTime                   @map("start_date") @db.Date
  endDate                   DateTime                   @map("end_date") @db.Date
  companyId                 Int                        @map("company_id")
  Company                   Company                    @relation(fields: [companyId], references: [id])
  Post                      Post[]
  SiteEvaluation            SiteEvaluation?
  TeamEvaluationByCompany   TeamEvaluationByCompany?
  MemberEvaluationByCompany MemberEvaluationByCompany?
  SiteBanner                SiteBanner[]
  InterestMember            Interest[]

  @@map("sites")
}

model Post {
  id                 Int            @id @default(autoincrement())
  isActive           Boolean        @default(true) @map("is_active")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  isPulledUp         Boolean        @default(false) @map("is_pulled_up")
  isHidden           Boolean        @default(false) @map("is_hidden")
  type               PostType
  category           PostCategory
  status             PostStatus
  name               String
  startDate          DateTime       @map("start_date")
  endDate            DateTime       @map("end_date")
  experienceType     ExperienceType @map("experience_type")
  numberOfPeople     Int            @map("number_of_people")
  specialNote        Code?          @relation(name: "post_special", fields: [specialNoteId], references: [id])
  specialNoteId      Int?
  occupation         Code?          @relation(name: "post_occupation", fields: [occupationId], references: [id])
  occupationId       Int?
  otherInformation   String         @map("other_information")
  salaryType         SalaryType     @map("salary_type")
  salaryAmount       Int            @map("salary_amount")
  startWorkDate      DateTime       @map("start_work_date")
  endWorkDate        DateTime       @map("end_work_date")
  workday            Workday[]
  startWorkTime      DateTime       @map("start_work_time") @db.Time()
  endWorkTime        DateTime       @map("end_work_time") @db.Time()
  siteName           String         @map("site_name")
  siteAddress        String         @map("site_address")
  sitePersonInCharge String         @map("site_person_in_charge")
  siteContact        String         @map("site_contact")
  originalBuilding   String         @map("original_building")
  site               Site           @relation(fields: [siteId], references: [id])
  siteId             Int            @map("site_id")
  postEditor         String         @map("post_editor")
  view               Int            @default(0)
  PostBanner         PostBanner[]
  interested         Interest[]
  applicants         Application[]

  @@map("posts")
}

model SiteEvaluation {
  id                     Int                      @id @default(autoincrement())
  isActive               Boolean                  @default(true) @map("is_active")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  totalEvaluators        Int                      @default(0) @map("total_evaluator")
  totalScore             Int?                     @map("total_score")
  averageScore           Float?                   @map("average_score") @db.Real
  siteId                 Int                      @unique @map("site_id")
  Site                   Site                     @relation(fields: [siteId], references: [id])
  SiteEvaluationByMember SiteEvaluationByMember[]

  @@map("site_evaluation")
}

model SiteEvaluationByMember {
  id               Int            @id @default(autoincrement())
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  score            Int?           @db.SmallInt
  SiteEvaluation   SiteEvaluation @relation(fields: [siteEvaluationId], references: [id])
  siteEvaluationId Int            @map("site_evaluation_id")
  memberId         Int            @unique @map("member_id")
  Member           Member         @relation(fields: [memberId], references: [id])

  @@map("site_evaluation_by_member")
}

model Interest {
  id         Int      @id @default(autoincrement())
  member     Member   @relation(fields: [memberId], references: [id])
  memberId   Int
  site       Site?    @relation(fields: [siteId], references: [id])
  siteId     Int?
  post       Post?    @relation(fields: [postId], references: [id])
  postId     Int?
  assignedAt DateTime @default(now())

  @@unique([memberId, postId])
  @@unique([memberId, siteId])
  @@map("interest")
}

model Application {
  id         Int                   @id @default(autoincrement())
  member     Member?               @relation(fields: [memberId], references: [id])
  memberId   Int?
  team       Team?                 @relation(fields: [teamId], references: [id])
  teamId     Int?
  post       Post                  @relation(fields: [postId], references: [id])
  postId     Int
  status     PostApplicationStatus @default(APPLY)
  assignedAt DateTime              @default(now())
  updatedAt  DateTime              @updatedAt @map("updated_at")

  @@unique([memberId, postId])
  @@unique([teamId, postId])
  @@map("application")
}

model TeamEvaluation {
  id                      Int                       @id @default(autoincrement())
  isActive                Boolean                   @default(true) @map("is_active")
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @updatedAt @map("updated_at")
  totalEvaluators         Int                       @default(0) @map("total_evaluator")
  totalScore              Int?                      @map("total_score")
  averageScore            Float?                    @map("average_score") @db.Real
  teamId                  Int                       @unique @map("team_id")
  Team                    Team                      @relation(fields: [teamId], references: [id])
  TeamEvaluationByCompany TeamEvaluationByCompany[]

  @@map("team_evaluation")
}

model TeamEvaluationByCompany {
  id               Int            @id @default(autoincrement())
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  score            Int?           @db.SmallInt
  TeamEvaluation   TeamEvaluation @relation(fields: [teamEvaluationId], references: [id])
  teamEvaluationId Int            @map("team_evaluation_id")
  siteId           Int            @unique @map("site_id")
  Site             Site           @relation(fields: [siteId], references: [id])

  @@map("team_evaluation_by_company")
}

model MemberEvaluation {
  id                        Int                         @id @default(autoincrement())
  isActive                  Boolean                     @default(true) @map("is_active")
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  totalEvaluators           Int                         @default(0) @map("total_evaluator")
  totalScore                Int?                        @map("total_score")
  averageScore              Float?                      @map("average_score") @db.Real
  memberId                  Int                         @unique @map("member_id")
  Member                    Member                      @relation(fields: [memberId], references: [id])
  MemberEvaluationByCompany MemberEvaluationByCompany[]

  @@map("member_evaluation")
}

model MemberEvaluationByCompany {
  id                 Int              @id @default(autoincrement())
  isActive           Boolean          @default(true) @map("is_active")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  score              Int?             @db.SmallInt
  MemberEvaluation   MemberEvaluation @relation(fields: [memberEvaluationId], references: [id])
  memberEvaluationId Int              @map("member_evaluation_id")
  siteId             Int              @unique @map("site_id")
  Site               Site             @relation(fields: [siteId], references: [id])

  @@map("member_evaluation_by_company")
}

enum FunctionName {
  MEMBER_MANAGEMENT
  TEAM_MANAGEMENT
  COMPANY_LIST
  SPECIAL_APPLICATION
  CERTIFICATION_APPLICATION
  DISABLED_REGISTRATION
  CAREER_REGISTRATION
  SITE_APPLICATION
  ANNOUNCEMENT_MANAGEMENT
  GENERAL_SUPPORT_MANAGEMENT
  MATCHING_SETTING_MANAGEMENT
  MATCHING_SETTING
  HEADHUNTING_REQUEST
  HEADHUNTING_MANAGEMENT
  HEADHUNTING_MANPOWER
  CONTRACT_MANAGEMENT
  EVALUATION_MANAGEMENT
  PRODUCT_PAYMENT_MANAGEMENT
  PRODUCT_POSSESSION_STATUS
  PRODUCT_USAGE_STATUS
  REFUND_MANAGEMENT
  SETTLEMENT_MANAGEMENT
  POINT_MANAGEMENT
  BANNER_MANAGEMENT
  PRODUCT_BANNER_MANAGEMENT
  PRODUCT_BANNER_INQUIRY
  CODE_MANAGEMENT
  ADVERTISING_BANNER_MANAGEMENT
  ANNOUNCEMENTS
  FAQ
  INQUIRY
  TERMS_AND_CONDITIONS
  LABOR_CONSULTATION_MANAGEMENT
  REPORT_MANAGEMENT
  SALARY_REPORT_PROXY_APPLICATION
  ADMINISTRATOR_MANAGEMENT
}

enum AccountType {
  ADMIN
  COMPANY
  MEMBER
}

enum AccountStatus {
  PENDING
  APPROVED
  SUSPENDED
  WITHDRAWN
}

enum AdminLevel {
  SUPERADMIN
  GENERAL
}

enum MemberLevel {
  PLATINUM
  GOLD
  SILVER
  TWO
  THREE
}

enum CompanyType {
  CORPORATION
  INDIVIDUAL
  OTHER
}

enum FileType {
  PDF
  ZIP
  RAR
  JPEG
  PNG
  CSV
  EXCEL
  WORD
}

enum TeamStatus {
  GENERAL
  STOPPED
  NOT_EXPOSED
  WAITING_ACTIVITY
  DELETED
}

enum DisabledType {
  BURN
  NONE
  VISION_IMPAIRMENT
  VISUAL_FIELD_EFFECT
  HEARING_IMPAIRMENT
  BALANCE_DYSFUNCTION
  SPEECH_IMPEDIMENT
  ABSTRACTION_OF_FACTIAL_AREA
  DEPRESSION
  DISORDERS_CAUSE_BY_DEFORMITIES
}

enum DisabledLevel {
  MILD
  SEVERE
}

enum CertificateStatus {
  REQUESTING
  REJECTED
  APPROVED
  REAPPLY
}

enum SignupMethodType {
  GENERAL
  GOOGLE
  APPLE
  KAKAO
  NAVER
}

enum CareerType {
  GENERAL
  CERTIFICATION
}

enum OtpType {
  EMAIL
  PHONE
}

enum CodeType {
  SPECIAL_NOTE
  JOB
}

enum ContractStatus {
  PRIMARY
  SUB_CONTRACT
  DROP_BOX
}

enum PostType {
  COMMON
  PREMIUM
}

enum PostCategory {
  GENERAL
  MATCHING
  HEADHUNTING
}

enum PostStatus {
  PREPARE
  RECRUITING
  DEADLINE
}

enum ExperienceType {
  SHORT // From 1 to 4 years of experience
  MEDIUM // From 5 to 9 years of experience
  LONG // From 10 years of experience
  REGARDLESS // Any type of experience
}

enum SalaryType {
  HOURLY
  FIRST_CLASS
  SALARY
}

enum Workday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
  AGREEMENT
}

enum PostApplicationStatus {
  APPLY
  REJECT_BY_COMPANY
  PROPOSAL_INTERVIEW
  PASS_INTERVIEW
  FAIL_INTERVIEW
  REJECT_BY_MEMBER
  APPROVE_BY_MEMBER
  APPROVE_BY_COMPANY
}
