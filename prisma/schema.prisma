// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                     Int                    @id @default(autoincrement())
  username               String                 @unique
  password               String
  type                   AccountType
  status                 AccountStatus
  isActive               Boolean                @default(true) @map("is_active")
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  lastAccessAt           DateTime               @default(now()) @map("last_access_at")
  accountStatusHistories AccountStatusHistory[]
  admin                  Admin?
  company                Company?
  member                 Member?
  notifications          Notification[]
  devices                Device[]
  announcements          Announcement[]

  @@map("accounts")
}

model AccountStatusHistory {
  id        Int           @id @default(autoincrement())
  accountId Int           @map("account_id")
  status    AccountStatus
  message   String        @default("")
  isActive  Boolean       @default(true) @map("is_active")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  account   Account       @relation(fields: [accountId], references: [id])

  @@map("account_status_histories")
}

model OtpProvider {
  id        Int      @id @default(autoincrement())
  otpCode   String   @map("otp_code")
  checked   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  ip        String
  type      OtpType
  data      String?
  updatedAt DateTime @updatedAt @map("updated_at")
  isUsed    Boolean  @default(false) @map("is_used")

  @@map("otp_providers")
}

model Admin {
  id          Int          @id @default(autoincrement())
  name        String
  level       AdminLevel
  accountId   Int          @unique @map("account_id")
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  account     Account      @relation(fields: [accountId], references: [id])
  permissions Permission[]

  @@map("admins")
}

model Member {
  id                           Int                           @id @default(autoincrement())
  name                         String
  accountId                    Int                           @unique @map("account_id")
  isActive                     Boolean                       @default(true) @map("is_active")
  createdAt                    DateTime                      @default(now()) @map("created_at")
  updatedAt                    DateTime                      @updatedAt @map("updated_at")
  contact                      String?
  email                        String?                       @unique
  totalExperienceYears         Int                           @default(0) @map("total_experience_years")
  totalExperienceMonths        Int                           @default(0) @map("total_experience_months")
  signupMethod                 SignupMethodType              @map("signup_method")
  level                        MemberLevel
  withdrawnDate                DateTime?                     @map("withdrawn_date") @db.Date
  regionId                     Int?                          @map("region_id")
  address                      String?
  desiredSalary                Int?                          @map("desired_salary")
  totalPoint                   Int                           @default(0) @map("total_point")
  isContactVerfied             Boolean                       @default(false) @map("is_contact_verified")
  applications                 Application[]
  bankAccount                  BankAccount?
  careerCertificationRequest   CareerCertificationRequest?
  careers                      Career[]
  currencyExchanges            CurrencyExchange[]
  disability                   Disability?
  foreignWorker                ForeignWorker?
  headhuntingRecommendations   HeadhuntingRecommendation[]
  basicHealthSafetyCertificate BasicHealthSafetyCertificate?
  interests                    Interest[]
  matchingRecommendations      MatchingRecommendation[]
  memberEvaluation             MemberEvaluation?
  account                      Account                       @relation(fields: [accountId], references: [id])
  region                       Region?                       @relation(fields: [regionId], references: [id])
  teams                        MembersOnTeams[]
  points                       Point[]
  licenses                     License[]
  teamInvitations              TeamInvitation[]
  leaders                      Team[]
  preference                   Preference?
  inquiries                    Inquiry[]
  memos                        Memo[]
  reports                      Report[]
  laborConsultations           LaborConsultation[]
  memberInformationRequests    MemberInformationRequest[]

  @@map("members")
}

model Company {
  id                        Int                        @id @default(autoincrement())
  accountId                 Int                        @unique @map("account_id")
  name                      String
  address                   String
  estDate                   DateTime                   @map("est_date")
  businessRegNumber         String                     @unique @map("buss_reg_number")
  corporateRegNumber        String                     @unique @map("corp_reg_number")
  type                      CompanyType
  email                     String                     @unique
  phone                     String
  contactPhone              String                     @map("contact_phone")
  contactName               String                     @map("contact_name")
  isActive                  Boolean                    @default(true) @map("is_active")
  createdAt                 DateTime                   @default(now()) @map("created_at")
  updatedAt                 DateTime                   @updatedAt @map("updated_at")
  presentativeName          String                     @map("presentative_name")
  insurance                 String?
  attachments               Attachment[]
  bannerRequests            BannerRequest[]
  account                   Account                    @relation(fields: [accountId], references: [id])
  logoId                    Int                        @unique
  contactCardId             Int                        @unique
  contactCard               File                       @relation("contact_card", references: [id], fields: [contactCardId])
  logo                      File                       @relation("logo", references: [id], fields: [logoId])
  matchingRequests          MatchingRequest[]
  posts                     Post[]
  productPaymentHistories   ProductPaymentHistory[]
  sites                     Site[]
  inquiries                 Inquiry[]
  laborConsultations        LaborConsultation[]
  memberInformationRequests MemberInformationRequest[]
  laborConsultationRequest  LaborConsultationRequest[]

  @@map("companies")
}

model Attachment {
  id        Int     @id @default(autoincrement())
  companyId Int
  fileId    Int     @unique
  company   Company @relation(fields: [companyId], references: [id])
  file      File    @relation(fields: [fileId], references: [id])

  @@map("attachments")
}

model Team {
  id                         Int                         @id @default(autoincrement())
  name                       String
  introduction               String?
  leaderId                   Int                         @map("leader_id")
  isActive                   Boolean                     @default(true) @map("is_active")
  createdAt                  DateTime                    @default(now()) @map("created_at")
  updatedAt                  DateTime                    @updatedAt @map("updated_at")
  status                     TeamStatus                  @default(GENERAL)
  totalMembers               Int                         @default(0) @map("total_members")
  exposureStatus             Boolean                     @default(false) @map("exposure_status")
  numberOfRecruitments       Int                         @default(0) @map("number_of_recruitments")
  totalExperienceMonths      Int                         @default(0) @map("total_experience_months")
  totalExperienceYears       Int                         @default(0) @map("total_experience_years")
  regionId                   Int                         @map("region_id")
  teamCode                   String                      @default("") @map("team_code")
  codeId                     Int
  code                       Code                        @relation(fields: [codeId], references: [id])
  desiredSalary              Int?                        @map("desired_salary")
  applications               Application[]
  headhuntingRecommendations HeadhuntingRecommendation[]
  matchingRecommendations    MatchingRecommendation[]
  members                    MembersOnTeams[]
  teamEvaluation             TeamEvaluation?
  teamInvitations            TeamInvitation[]
  region                     Region                      @relation(fields: [regionId], references: [id])
  leader                     Member                      @relation(fields: [leaderId], references: [id])

  @@map("teams")
}

model MembersOnTeams {
  teamId    Int      @map("team_id")
  memberId  Int      @map("member_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  member    Member   @relation(fields: [memberId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@id([memberId, teamId])
  @@map("members_on_teams")
}

model TeamInvitation {
  teamId    Int               @map("team_id")
  memberId  Int               @map("member_id")
  isActive  Boolean           @default(true) @map("is_active")
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  status    InvitationStatus?
  id        Int               @id @default(autoincrement())
  member    Member            @relation(fields: [memberId], references: [id])
  team      Team              @relation(fields: [teamId], references: [id])

  @@unique([teamId, memberId])
  @@map("team_invitations")
}

model ForeignWorker {
  id                 Int      @id @default(autoincrement())
  englishName        String   @map("english_name")
  registrationNumber String   @map("registration_number")
  serialNumber       String   @map("serial_number")
  dateOfIssue        DateTime @map("date_of_issue") @db.Date
  memberId           Int      @unique @map("member_id")
  fileId             Int      @unique @map("file_id")
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  file               File     @relation(fields: [fileId], references: [id])
  member             Member   @relation(fields: [memberId], references: [id])

  @@map("foreign_workers")
}

model BankAccount {
  id            Int      @id @default(autoincrement())
  accountHolder String   @map("account_holder")
  accountNumber String   @map("account_number")
  bankName      String   @map("bank_name")
  memberId      Int      @unique @map("member_id")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  member        Member   @relation(fields: [memberId], references: [id])

  @@map("bank_accounts")
}

model Disability {
  id        Int      @id @default(autoincrement())
  memberId  Int      @unique @map("member_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  file      File     @relation(fields: [fileId], references: [id])
  fileId    Int      @unique @map("file_id")
  member    Member   @relation(fields: [memberId], references: [id])

  @@map("disabilities")
}

model BasicHealthSafetyCertificate {
  id                 Int      @id @default(autoincrement())
  registrationNumber String   @map("registration_number")
  dateOfCompletion   DateTime @map("date_of_completion") @db.Date
  memberId           Int      @unique @map("member_id")
  fileId             Int      @unique @map("file_id")
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  file               File     @relation(fields: [fileId], references: [id])
  member             Member   @relation(fields: [memberId], references: [id])

  @@map("hst_certificates")
}

model File {
  id                            Int                           @id @default(autoincrement())
  type                          FileType
  key                           String?                       @unique
  fileName                      String?                       @map("file_name")
  size                          BigInt
  isActive                      Boolean                       @default(true) @map("is_active")
  createdAt                     DateTime                      @default(now()) @map("created_at")
  updatedAt                     DateTime                      @updatedAt @map("updated_at")
  attachment                    Attachment?
  banner                        Banner?
  contract                      Contract?
  foreignWorker                 ForeignWorker?
  basicHealthSafetyCertificate  BasicHealthSafetyCertificate?
  license                       License?
  taxBill                       TaxBill?
  cardReceipt                   CardReceipt?
  announcementFile              AnnouncementFile?
  disability                    Disability?
  questionInquiryFile           InquiryFile?                  @relation("question_file")
  answerInquiryFile             InquiryFile?                  @relation("answer_file")
  faqFile                       FaqFile?
  questionLaborConsultationFile LaborConsultationFile?        @relation("question_file")
  answerLaborConsultationFile   LaborConsultationFile?        @relation("answer_file")
  point                         Point?
  logo                          Company?                      @relation("logo")
  contactCard                   Company?                      @relation("contact_card")
  reportFile                    ReportFile?

  @@map("files")
}

model Permission {
  adminId    Int      @map("admin_id")
  functionId Int      @map("function_id")
  admin      Admin    @relation(fields: [adminId], references: [id])
  function   Function @relation(fields: [functionId], references: [id])

  @@id([adminId, functionId])
  @@map("permissions")
}

model Function {
  id          Int          @id @default(autoincrement())
  name        FunctionName
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  permissions Permission[]

  @@map("functions")
}

model License {
  id              Int               @id @default(autoincrement())
  status          CertificateStatus @default(REQUESTING)
  licenseNumber   String            @map("license_number")
  acquisitionDate DateTime          @map("acquisition_date")
  isActive        Boolean           @default(true) @map("is_active")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  memberId        Int               @map("member_id")
  codeId          Int?              @map("code_id")
  fileId          Int               @unique @map("file_id")
  code            Code?             @relation(fields: [codeId], references: [id])
  file            File              @relation(fields: [fileId], references: [id])
  member          Member            @relation(fields: [memberId], references: [id])

  @@map("licenses")
}

model Career {
  id                Int                      @id @default(autoincrement())
  companyName       String                   @map("company_name")
  siteName          String                   @map("site_name")
  startDate         DateTime                 @map("start_date")
  endDate           DateTime                 @map("end_date")
  type              CareerType
  isExperienced     Boolean                  @map("is_experienced")
  experiencedYears  Int                      @default(0)
  experiencedMonths Int                      @default(0)
  codeId            Int
  isActive          Boolean                  @default(true) @map("is_active")
  createdAt         DateTime                 @default(now()) @map("created_at")
  updatedAt         DateTime                 @updatedAt @map("updated_at")
  memberId          Int                      @map("member_id")
  certificationType CareerCertificationType?
  member            Member                   @relation(fields: [memberId], references: [id])
  code              Code                     @relation(fields: [codeId], references: [id])

  @@map("careers")
}

model CareerCertificationRequest {
  id        Int                              @id @default(autoincrement())
  createdAt DateTime                         @default(now()) @map("created_at")
  updatedAt DateTime                         @updatedAt @map("updated_at")
  memberId  Int                              @unique
  status    CareerCertificationRequestStatus @default(REQUESTING) @map("status")
  member    Member                           @relation(fields: [memberId], references: [id])

  @@map("career_certification_requests")
}

model Banner {
  id                Int                @id @default(autoincrement())
  status            BannerStatus       @default(HIDE)
  fileId            Int                @unique
  isActive          Boolean            @default(true) @map("is_active")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  endDate           DateTime           @map("end_date") @db.Date
  startDate         DateTime           @map("start_date") @db.Date
  advertisingBanner AdvertisingBanner?
  file              File               @relation(fields: [fileId], references: [id])
  postBanner        PostBanner?

  @@map("banners")
}

model AdvertisingBanner {
  id       Int            @unique
  urlLink  String         @map("url_link")
  title    String
  priority Int?
  type     BannerType
  banner   Banner         @relation(fields: [id], references: [id])
  request  BannerRequest?

  @@map("advertising_banners")
}

model PostBanner {
  id       Int            @unique
  priority Int?
  postId   Int            @map("post_id")
  type     BannerType
  request  BannerRequest?
  banner   Banner         @relation(fields: [id], references: [id])
  post     Post           @relation(fields: [postId], references: [id])

  @@map("post_banners")
}

model BannerRequest {
  id                     Int                    @id @default(autoincrement())
  acceptDate             DateTime?              @map("accept_date") @db.Date
  detail                 String?
  status                 RequestBannerStatus    @default(PENDING)
  companyId              Int
  advertisingBannerId    Int?                   @unique
  postBannerId           Int?                   @unique
  requestDate            DateTime               @default(now()) @map("request_date") @db.Date
  isActive               Boolean                @default(true) @map("is_active")
  requestBannerHistories BannerRequestHistory[]
  advertisingBanner      AdvertisingBanner?     @relation(fields: [advertisingBannerId], references: [id])
  company                Company                @relation(fields: [companyId], references: [id])
  postBanner             PostBanner?            @relation(fields: [postBannerId], references: [id])

  @@map("banner_requests")
}

model BannerRequestHistory {
  id              Int                 @id @default(autoincrement())
  status          RequestBannerStatus
  reason          String?
  createdAt       DateTime            @default(now()) @map("created_at")
  bannerRequestId Int?
  bannerRequest   BannerRequest?      @relation(fields: [bannerRequestId], references: [id])

  @@map("banner_request_histories")
}

model Code {
  id        Int       @id @default(autoincrement())
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  code      String    @unique
  name      String    @map("name")
  careers   Career[]
  posts     Post[]
  licenses  License[]
  teams     Team[]

  @@map("codes")
}

model Site {
  id                         Int                         @id @default(autoincrement())
  isActive                   Boolean                     @default(true) @map("is_active")
  createdAt                  DateTime                    @default(now()) @map("created_at")
  updatedAt                  DateTime                    @updatedAt @map("updated_at")
  status                     SiteStatus                  @default(REVIEWING)
  name                       String
  address                    String
  longitude                  Float
  latitude                   Float
  contact                    String
  personInCharge             String                      @map("person_in_charge")
  personInChargeContact      String                      @map("person_in_charge_contact")
  originalBuilding           String                      @map("original_building")
  email                      String
  taxInvoiceEmail            String                      @map("tax_invoice_email")
  siteManagementNumber       String                      @map("site_management_number")
  contractStatus             ContractStatus?             @map("contract_status")
  startDate                  DateTime                    @map("start_date") @db.Date
  endDate                    DateTime                    @map("end_date") @db.Date
  companyId                  Int                         @map("company_id")
  numberOfContract           Int                         @default(0)
  regionId                   Int                         @map("region_id")
  numberOfWorkers            Int                         @default(0)
  interests                  Interest[]
  memberEvaluationsByCompany MemberEvaluationByCompany[]
  posts                      Post[]
  siteEvaluations            SiteEvaluation?
  siteHistories              SiteHistory[]
  company                    Company                     @relation(fields: [companyId], references: [id])
  region                     Region                      @relation(fields: [regionId], references: [id])
  teamEvaluationsByCompany   TeamEvaluationByCompany[]
  salaryReport               SalaryReport[]

  @@map("sites")
}

model SiteHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  content   String
  siteId    Int      @map("site_id")
  site      Site     @relation(fields: [siteId], references: [id])

  @@map("site_histories")
}

model Post {
  id                    Int            @id @default(autoincrement())
  isActive              Boolean        @default(true) @map("is_active")
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")
  isPulledUp            Boolean        @default(false) @map("is_pulled_up")
  isHidden              Boolean        @default(false) @map("is_hidden")
  type                  PostType       @default(COMMON)
  category              PostCategory
  status                PostStatus
  name                  String
  startDate             DateTime       @map("start_date") @db.Date
  endDate               DateTime       @map("end_date") @db.Date
  experienceType        ExperienceType @map("experience_type")
  numberOfPeoples       Int            @map("number_of_people")
  otherInformation      String         @map("other_information")
  salaryType            SalaryType?    @map("salary_type")
  salaryAmount          Int?           @map("salary_amount")
  startWorkDate         DateTime?      @map("start_work_date") @db.Date
  endWorkDate           DateTime?      @map("end_work_date") @db.Date
  workdays              Workday[]
  startWorkTime         DateTime?      @map("start_work_time") @db.Time(6)
  endWorkTime           DateTime?      @map("end_work_time") @db.Time(6)
  postEditor            String?        @map("post_editor")
  freePullUp            Boolean        @default(true) @map("free_pull_up")
  pullUpExpirationTime  DateTime?      @map("last_pulled_up")
  nextFreePulledUpTime  DateTime?      @map("last_free_pulled_up")
  premiumExpirationTime DateTime?      @map("premium_expiration_time")
  view                  Int            @default(0)
  companyId             Int            @map("company_id")
  codeId                Int?           @map("code_id")
  siteId                Int?           @map("site_id")
  applications          Application[]
  headhunting           Headhunting?
  interests             Interest[]
  postBanners           PostBanner[]
  postHistories         PostHistory[]
  company               Company        @relation(fields: [companyId], references: [id])
  code                  Code?          @relation(fields: [codeId], references: [id])
  site                  Site?          @relation(fields: [siteId], references: [id])

  @@map("posts")
}

model Settlement {
  id                          Int                       @id @default(autoincrement())
  createdAt                   DateTime                  @default(now()) @map("created_at")
  updateAt                    DateTime                  @updatedAt @map("updated_at")
  isActive                    Boolean                   @default(true) @map("is_active")
  completeDate                DateTime?                 @map("complete_date")
  requestDate                 DateTime?                 @map("request_date")
  status                      SettlementStatus          @default(UNSETTLED) @map("status")
  headHuntingRecommendationId Int                       @unique @map("headhunting_recommendation_id")
  headHuntingRecommendation   HeadhuntingRecommendation @relation(fields: [headHuntingRecommendationId], references: [id])

  @@map("settlements")
}

model PostHistory {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @updatedAt @map("updated_at")
  historyType PostHistoryType @map("history_type")
  content     String          @map("content")
  postId      Int             @map("post_id")
  post        Post            @relation(fields: [postId], references: [id])

  @@map("post_histories")
}

model SiteEvaluation {
  id                         Int                        @id @default(autoincrement())
  isActive                   Boolean                    @default(true) @map("is_active")
  createdAt                  DateTime                   @default(now()) @map("created_at")
  updatedAt                  DateTime                   @updatedAt @map("updated_at")
  totalEvaluators            Int                        @default(0) @map("total_evaluator")
  totalScores                Int?                       @map("total_score")
  averageScore               Float?                     @map("average_score") @db.Real
  siteId                     Int                        @unique @map("site_id")
  site                       Site                       @relation(fields: [siteId], references: [id])
  siteEvaluationsByContracts SiteEvaluationByContract[]

  @@map("site_evaluations")
}

model SiteEvaluationByContract {
  id               Int            @id @default(autoincrement())
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  score            Int?           @db.SmallInt
  siteEvaluationId Int            @map("site_evaluation_id")
  contractId       Int            @map("contract_id")
  contract         Contract       @relation(fields: [contractId], references: [id])
  siteEvaluation   SiteEvaluation @relation(fields: [siteEvaluationId], references: [id])

  @@unique([siteEvaluationId, contractId])
  @@map("site_evaluations_by_contract")
}

model Interest {
  id         Int      @id @default(autoincrement())
  memberId   Int      @map("member_id")
  siteId     Int?     @map("site_id")
  postId     Int?     @map("post_id")
  assignedAt DateTime @default(now())
  member     Member   @relation(fields: [memberId], references: [id])
  post       Post?    @relation(fields: [postId], references: [id])
  site       Site?    @relation(fields: [siteId], references: [id])

  @@unique([memberId, postId])
  @@unique([memberId, siteId])
  @@map("interests")
}

model Application {
  id                        Int                        @id @default(autoincrement())
  memberId                  Int?                       @map("member_id")
  teamId                    Int?                       @map("team_id")
  postId                    Int                        @map("post_id")
  status                    PostApplicationStatus      @default(APPLY)
  assignedAt                DateTime                   @default(now()) @db.Date
  updatedAt                 DateTime                   @updatedAt @map("updated_at")
  category                  ApplicationCategory        @default(NORMAL)
  member                    Member?                    @relation(fields: [memberId], references: [id])
  post                      Post                       @relation(fields: [postId], references: [id])
  team                      Team?                      @relation(fields: [teamId], references: [id])
  contract                  Contract?
  interview                 Interview?
  headhuntingRecommendation HeadhuntingRecommendation?

  @@unique([memberId, postId])
  @@unique([teamId, postId])
  @@map("applications")
}

model TeamEvaluation {
  id                         Int                       @id @default(autoincrement())
  isActive                   Boolean                   @default(true) @map("is_active")
  createdAt                  DateTime                  @default(now()) @map("created_at")
  updatedAt                  DateTime                  @updatedAt @map("updated_at")
  totalEvaluators            Int                       @default(0) @map("total_evaluator")
  totalScores                Int?                      @map("total_score")
  averageScore               Float?                    @map("average_score") @db.Real
  teamId                     Int                       @unique @map("team_id")
  team                       Team                      @relation(fields: [teamId], references: [id])
  teamEvaluationsByCompanies TeamEvaluationByCompany[]

  @@map("team_evaluations")
}

model TeamEvaluationByCompany {
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  score            Int?           @db.SmallInt
  teamEvaluationId Int            @map("team_evaluation_id")
  siteId           Int            @map("site_id")
  id               Int            @id @default(autoincrement())
  site             Site           @relation(fields: [siteId], references: [id])
  teamEvaluation   TeamEvaluation @relation(fields: [teamEvaluationId], references: [id])

  @@unique([teamEvaluationId, siteId])
  @@map("team_evaluations_by_company")
}

model MemberEvaluation {
  id                           Int                         @id @default(autoincrement())
  isActive                     Boolean                     @default(true) @map("is_active")
  createdAt                    DateTime                    @default(now()) @map("created_at")
  updatedAt                    DateTime                    @updatedAt @map("updated_at")
  totalEvaluators              Int                         @default(0) @map("total_evaluator")
  totalScores                  Int?                        @map("total_score")
  averageScore                 Float?                      @map("average_score") @db.Real
  memberId                     Int                         @unique @map("member_id")
  member                       Member                      @relation(fields: [memberId], references: [id])
  memberEvaluationsByCompanies MemberEvaluationByCompany[]

  @@map("member_evaluations")
}

model MemberEvaluationByCompany {
  isActive           Boolean          @default(true) @map("is_active")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  score              Int?             @db.SmallInt
  memberEvaluationId Int              @map("member_evaluation_id")
  siteId             Int              @map("site_id")
  id                 Int              @id @default(autoincrement())
  memberEvaluation   MemberEvaluation @relation(fields: [memberEvaluationId], references: [id])
  site               Site             @relation(fields: [siteId], references: [id])

  @@unique([memberEvaluationId, siteId])
  @@map("member_evaluations_by_company")
}

model HeadhuntingRequest {
  id              Int                         @id @default(autoincrement())
  isActive        Boolean                     @default(false) @map("is_active")
  createdAt       DateTime                    @default(now()) @map("created_at")
  updatedAt       DateTime                    @updatedAt @map("updated_at")
  date            DateTime                    @default(now())
  status          HeadhuntingRequestStatus
  object          RequestObject
  detail          String                      @default("")
  rejectReason    String?                     @default("") @map("reject_reason")
  headhunting     Headhunting                 @relation(fields: [headhuntingId], references: [id])
  headhuntingId   Int                         @map("headhunting_id")
  usageHistory    UsageHistory                @relation(fields: [usageHistoryId], references: [id])
  usageHistoryId  Int                         @unique @map("usage_history_id")
  recommendations HeadhuntingRecommendation[]

  @@map("headhunting_requests")
}

model Headhunting {
  id              Int                         @id @default(autoincrement())
  requests        HeadhuntingRequest[]
  recommendations HeadhuntingRecommendation[]
  paymentStatus   HeadhuntingPaymentStatus    @default(UN_PAID) @map("payment_status")
  paymentDate     DateTime?                   @map("payment_date") @db.Date
  post            Post                        @relation(fields: [postId], references: [id])
  postId          Int                         @unique
  isActive        Boolean                     @default(true) @map("is_active")
  updatedAt       DateTime                    @updatedAt @map("updated_at")

  @@map("headhunting")
}

model Interview {
  id            Int             @id @default(autoincrement())
  isActive      Boolean         @default(true) @map("is_active")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  applicationId Int             @unique @map("application_id")
  status        InterviewStatus
  requestDate   DateTime        @default(now()) @map("request_date") @db.Date
  application   Application     @relation(fields: [applicationId], references: [id])

  @@map("interviews")
}

model HeadhuntingRecommendation {
  id                   Int                       @id @default(autoincrement())
  status               HeadhuntingMatchingStatus @default(NOT_MATCHING)
  memberId             Int?                      @map("member_id")
  teamId               Int?                      @map("team_id")
  assignedAt           DateTime                  @default(now()) @map("assigned_at")
  updatedAt            DateTime                  @updatedAt @map("updated_at")
  headhuntingId        Int                       @map("headhunting_id")
  headhunting          Headhunting               @relation(fields: [headhuntingId], references: [id])
  member               Member?                   @relation(fields: [memberId], references: [id])
  team                 Team?                     @relation(fields: [teamId], references: [id])
  applicationId        Int?                      @unique
  application          Application?              @relation(fields: [applicationId], references: [id])
  settlement           Settlement?
  headhuntingRequest   HeadhuntingRequest        @relation(fields: [headhuntingRequestId], references: [id])
  headhuntingRequestId Int

  @@unique([memberId, headhuntingId])
  @@unique([teamId, headhuntingId])
  @@map("headhunting_recommendations")
}

model Contract {
  id                         Int                        @id @default(autoincrement())
  paymentForm                PaymentForm                @default(ON_SITE) @map("payment_form")
  startDate                  DateTime                   @map("start_date") @db.Date
  endDate                    DateTime                   @map("end_date") @db.Date
  fileId                     Int                        @unique @map("file_id")
  applicationId              Int                        @unique @map("application_id")
  amount                     Int                        @default(0)
  manager                    String                     @default("")
  contact                    String                     @default("")
  department                 String                     @default("")
  createdAt                  DateTime                   @default(now()) @map("created_at") @db.Date
  salaryType                 SalaryType                 @default(DAILY) @map("salary_type")
  application                Application                @relation(fields: [applicationId], references: [id])
  file                       File                       @relation(fields: [fileId], references: [id])
  labor                      Labor?
  siteEvaluationsByContracts SiteEvaluationByContract[]

  @@map("contracts")
}

model Region {
  id                  Int      @id @default(autoincrement())
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at")
  cityId              Int      @default(1) @map("city_id")
  districtKoreanName  String   @map("district_korean_name")
  districtEnglishName String   @map("district_english_name")
  cityKoreanName      String   @map("city_korean_name")
  cityEnglishName     String   @map("city_english_name")
  members             Member[]
  sites               Site[]
  teams               Team[]

  @@map("region")
}

model MatchingRequest {
  id              Int                      @id @default(autoincrement())
  isActive        Boolean                  @default(true) @map("is_active")
  createdAt       DateTime                 @default(now()) @map("created_at")
  updatedAt       DateTime                 @default(now()) @updatedAt @map("updated_at")
  date            DateTime                 @default(now()) @db.Date
  recommendations MatchingRecommendation[]
  usageHistory    UsageHistory?            @relation(fields: [usageHistoryId], references: [id])
  usageHistoryId  Int?                     @unique @map("usage_history_id")
  companyId       Int                      @map("company_id")
  company         Company                  @relation(fields: [companyId], references: [id])

  @@unique([date, companyId])
  @@map("matching_request")
}

model MatchingRecommendation {
  id                Int             @id @default(autoincrement())
  memberId          Int?            @map("member_id")
  teamId            Int?            @map("team_id")
  assignedAt        DateTime        @default(now()) @map("assigned_at") @db.Date
  updatedAt         DateTime        @updatedAt @map("updated_at")
  member            Member?         @relation(fields: [memberId], references: [id])
  team              Team?           @relation(fields: [teamId], references: [id])
  matchingRequest   MatchingRequest @relation(fields: [matchingRequestId], references: [id])
  matchingRequestId Int

  @@unique([memberId, matchingRequestId])
  @@unique([teamId, matchingRequestId])
  @@map("matching_recommendations")
}

model Labor {
  id              Int             @id @default(autoincrement())
  contractId      Int             @unique @map("contract_id")
  contract        Contract        @relation(fields: [contractId], references: [id])
  salaryHistories SalaryHistory[]
  workDates       WorkDate[]

  @@map("labors")
}

model WorkDate {
  id      Int      @id @default(autoincrement())
  laborId Int      @map("labor_id")
  date    DateTime @db.Date
  hour    Int
  labor   Labor    @relation(fields: [laborId], references: [id])

  @@unique([laborId, date])
  @@map("work_dates")
}

model SalaryHistory {
  id                  Int      @id @default(autoincrement())
  laborId             Int      @map("labor_id")
  base                Int      @default(0)
  otherAllowance      Int      @default(0) @map("other_allowance")
  overtimePay         Int      @default(0) @map("overtime_pay")
  meals               Int      @default(0)
  totalPayment        Int      @default(0) @map("total_payment")
  nationalPension     Int      @default(0) @map("national_pension")
  healthInsurance     Int      @default(0) @map("health_insurance")
  longTermCare        Int      @default(0) @map("long_term_care")
  employmentInsurance Int      @default(0) @map("employment_insurance")
  retirementDeduction Int      @default(0) @map("retirement_deduction")
  incomeTax           Int      @default(0) @map("income_tax")
  residentTax         Int      @default(0) @map("resident_tax")
  totalDeductible     Int      @default(0) @map("total_deductible")
  actualPayment       Int      @default(0) @map("actual_payment")
  date                DateTime
  labor               Labor    @relation(fields: [laborId], references: [id])

  @@unique([laborId, date])
  @@map("salary_histories")
}

model Notification {
  id        Int                @id @default(autoincrement())
  title     String
  content   String?
  isActive  Boolean            @default(true) @map("is_active")
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  type      NotificationType
  accountId Int                @map("account_id")
  status    NotificationStatus @default(NOT_READ) @map("status")
  account   Account            @relation(fields: [accountId], references: [id])
  typeId    Int?               @map("type_id")

  @@map("notifications")
}

model Device {
  id        Int      @id @default(autoincrement())
  isActive  Boolean  @default(true) @map("is_active")
  updatedAt DateTime @updatedAt @map("updated_at")
  accountId Int      @map("account_id")
  account   Account  @relation(fields: [accountId], references: [id])
  token     String

  @@unique([token, accountId])
  @@map("devices")
}

model Announcement {
  id                Int                @id @default(autoincrement())
  title             String
  content           String?
  isActive          Boolean            @default(true) @map("is_active")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  accountId         Int                @map("account_id")
  account           Account            @relation(fields: [accountId], references: [id])
  announcementFiles AnnouncementFile[]

  @@map("annoucements")
}

model AnnouncementFile {
  id            Int          @id @default(autoincrement())
  anouncementId Int
  fileId        Int          @unique
  announcement  Announcement @relation(fields: [anouncementId], references: [id])
  file          File         @relation(fields: [fileId], references: [id])
  isActive      Boolean      @default(true) @map("is_active")

  @@map("announcement_files")
}

model Point {
  id           Int         @id @default(autoincrement())
  memberId     Int         @map("member_id")
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  reason       String?
  amount       Int?        @map("amount")
  remainAmount Int?        @map("remain_amount")
  status       PointStatus
  fileId       Int         @unique @map("file_id")
  file         File        @relation(fields: [fileId], references: [id])
  member       Member      @relation(fields: [memberId], references: [id])

  @@map("points")
}

model CurrencyExchange {
  id        Int         @id @default(autoincrement())
  memberId  Int         @map("member_id")
  isActive  Boolean     @default(true) @map("is_active")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  reason    String?
  amount    Int         @default(0) @map("amount")
  status    PointStatus
  member    Member      @relation(fields: [memberId], references: [id])

  @@map("currency_exchanges")
}

model Product {
  id                      Int                     @id @default(autoincrement())
  isActive                Boolean                 @default(true) @map("is_active")
  createdAt               DateTime                @default(now()) @map("created_at")
  updatedAt               DateTime                @updatedAt @map("updated_at")
  productType             ProductType             @map("product_type")
  price                   Int
  usageCycle              Int                     @default(0) @map("usage_cycle")
  countLimit              Int                     @map("count_limit")
  monthLimit              Int                     @map("month_limit")
  usageType               UsageType               @map("usage_type")
  productPaymentHistories ProductPaymentHistory[]

  @@map("products")
}

model ProductPaymentHistory {
  id             Int            @id @default(autoincrement())
  isActive       Boolean        @default(true) @map("is_active")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  cost           Int
  status         PaymentStatus  @default(PROCESSING)
  merchantId     String?        @unique @map("merchant_id")
  expirationDate DateTime       @map("expiration_date") @db.Date()
  remainingTimes Int            @map("remaining_times")
  productId      Int            @map("product_id")
  companyId      Int            @map("company_id")
  paymentType    PaymentType?   @map("payment_type")
  company        Company        @relation(fields: [companyId], references: [id])
  product        Product        @relation(fields: [productId], references: [id])
  cardReceipt    CardReceipt?
  taxBill        TaxBill?
  refund         Refund?
  usageHistories UsageHistory[]

  @@map("product_payment_histories")
}

model CardReceipt {
  id                      Int                   @id @default(autoincrement())
  isActive                Boolean               @default(true) @map("is_active")
  createdAt               DateTime              @default(now()) @map("created_at")
  fileId                  Int?                  @unique @map("file_id")
  file                    File?                 @relation(fields: [fileId], references: [id])
  productPaymentHistoryId Int                   @unique @map("product_payment_history_id")
  productPaymentHistory   ProductPaymentHistory @relation(fields: [productPaymentHistoryId], references: [id])
  status                  CardReceiptStatus     @default(IN_PROGRESS)

  @@map("card_receipts")
}

model TaxBill {
  id                      Int                   @id @default(autoincrement())
  isActive                Boolean               @default(true) @map("is_active")
  createdAt               DateTime              @default(now()) @map("created_at")
  updatedAt               DateTime              @updatedAt @map("updated_at")
  fileId                  Int?                  @unique @map("file_id")
  file                    File?                 @relation(fields: [fileId], references: [id])
  productPaymentHistoryId Int                   @unique @map("product_payment_history_id")
  productPaymentHistory   ProductPaymentHistory @relation(fields: [productPaymentHistoryId], references: [id])
  status                  TaxBillStatus         @default(NOT_ISSUED)

  @@map("tax_bills")
}

model UsageHistory {
  id                       Int                       @id @default(autoincrement())
  productPaymentHistoryId  Int                       @map("product_payment_history_id")
  productPaymentHistory    ProductPaymentHistory     @relation(fields: [productPaymentHistoryId], references: [id])
  createdAt                DateTime                  @default(now()) @map("created_at") @db.Date
  expirationDate           DateTime                  @map("expiration_date")
  remainNumbers            Int                       @map("remain_number")
  headHuntingRequest       HeadhuntingRequest?
  matchingRequest          MatchingRequest?
  memberInformationRequest MemberInformationRequest?
  laborConsultationRequest LaborConsultationRequest?

  @@map("usage_histories")
}

model Refund {
  id                      Int                   @id @default(autoincrement())
  isActive                Boolean               @default(true) @map("is_active")
  createdAt               DateTime              @default(now()) @map("created_at")
  updatedAt               DateTime              @updatedAt @map("updated_at")
  productPaymentHistoryId Int                   @unique
  productPaymentHistory   ProductPaymentHistory @relation(fields: [productPaymentHistoryId], references: [id])
  status                  RefundStatus
  refundHistories         RefundHistory[]

  @@map("refunds")
}

model RefundHistory {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now()) @map("created_at")
  refundId  Int          @map("refund_id")
  refund    Refund       @relation(fields: [refundId], references: [id])
  status    RefundStatus
  reason    String?

  @@map("refund_histories")
}

model Bank {
  id        Int      @id @default(autoincrement())
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  name      String

  @@map("banks")
}

model Preference {
  id                                     Int      @id @default(autoincrement())
  memberId                               Int      @unique @map("member_id")
  isActive                               Boolean  @default(true) @map("is_active")
  createdAt                              DateTime @default(now()) @map("created_at")
  updatedAt                              DateTime @updatedAt @map("updated_at")
  isPushNotificationActive               Boolean  @default(true) @map("is_push_notification_active")
  isNotificationSoundActive              Boolean  @default(true) @map("is_notification_sound_active")
  isNoticeNotificationActive             Boolean  @default(true) @map("is_notice_notification_active")
  isServiceNotificationActive            Boolean  @default(true) @map("is_service_notification_active")
  isTeamNotificationActive               Boolean  @default(true) @map("is_team_notification_active")
  isSearchByMemberLocationAllowed        Boolean  @default(false) @map("is_search_by_member_location_allowed")
  isMemberLocationSearchedBySitesAllowed Boolean  @default(false) @map("is_member_location_searched_by_sites_allowed")
  member                                 Member   @relation(fields: [memberId], references: [id])

  @@map("preferences")
}

model SalaryReport {
  id             Int      @id @default(autoincrement())
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  isAdminDeleted Boolean  @default(false) @map("is_admin_deleted")
  siteId         Int      @map("site_id")
  site           Site     @relation(fields: [siteId], references: [id])

  @@map("salary_reports")
}

model Inquiry {
  id              Int           @id @default(autoincrement())
  isActive        Boolean       @default(true) @map("is_active")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  answeredAt      DateTime?     @map("answered_at")
  memberId        Int?          @map("member_id")
  companyId       Int?          @map("company_id")
  questionTitle   String        @map("question_title")
  questionContent String        @map("question_content")
  answerTitle     String?       @map("answer_title")
  answerContent   String?       @map("answer_content")
  inquiryType     InquiryType   @map("inquiry_type")
  inquirerType    InquirerType  @map("inquirer_type")
  status          AnswerStatus  @default(WAITING)
  member          Member?       @relation(fields: [memberId], references: [id])
  company         Company?      @relation(fields: [companyId], references: [id])
  questionFiles   InquiryFile[] @relation("question_inquiry")
  answerFiles     InquiryFile[] @relation("answer_inquiry")

  @@map("inquiries")
}

model InquiryFile {
  id                Int      @id @default(autoincrement())
  questionFileId    Int?     @unique @map("question_file_id")
  answerFileId      Int?     @unique @map("answer_file_id")
  questionInquiryId Int?     @map("question_inquiry_id")
  answerInquiryId   Int?     @map("answer_inquiry_id")
  questionInquiry   Inquiry? @relation("question_inquiry", fields: [questionInquiryId], references: [id])
  answerInquiry     Inquiry? @relation("answer_inquiry", fields: [answerInquiryId], references: [id])
  questionFile      File?    @relation("question_file", fields: [questionFileId], references: [id])
  answerFile        File?    @relation("answer_file", fields: [answerFileId], references: [id])

  @@map("inquiry_files")
}

model Report {
  id              Int          @id @default(autoincrement())
  isActive        Boolean      @default(true) @map("is_active")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  isAdminDeleted  Boolean      @default(false) @map("is_admin_deleted")
  answeredAt      DateTime?    @map("answered_at")
  memberId        Int          @map("member_id")
  questionTitle   String       @map("question_title")
  questionContent String       @map("question_content")
  answerTitle     String       @default("") @map("answer_title")
  answerContent   String       @default("") @map("answer_content")
  reportType      ReportType   @map("report_type")
  status          AnswerStatus @default(WAITING)
  member          Member       @relation(fields: [memberId], references: [id])
  questionFiles   ReportFile[] @relation("question_files")
  answerFiles     ReportFile[] @relation("answer_files")

  @@map("reports")
}

model ReportFile {
  id               Int     @id @default(autoincrement())
  fileId           Int     @unique
  file             File    @relation(fields: [fileId], references: [id])
  questionReport   Report? @relation("question_files", fields: [questionReportId], references: [id])
  answerReport     Report? @relation("answer_files", fields: [answerReportId], references: [id])
  questionReportId Int?
  answerReportId   Int?

  @@map("report_files")
}

model LaborConsultation {
  id                       Int                       @id @default(autoincrement())
  isActive                 Boolean                   @default(true) @map("is_active")
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  answeredAt               DateTime?                 @map("answered_at")
  memberId                 Int?                      @map("member_id")
  companyId                Int?                      @map("company_id")
  questionTitle            String                    @map("question_title")
  questionContent          String                    @map("question_content")
  answerTitle              String?                   @map("answer_title")
  answerContent            String?                   @map("answer_content")
  laborConsultationType    LaborConsultationType     @map("labor_consultation_type")
  inquirerType             InquirerType              @map("inquirer_type")
  status                   AnswerStatus              @default(WAITING)
  member                   Member?                   @relation(fields: [memberId], references: [id])
  company                  Company?                  @relation(fields: [companyId], references: [id])
  questionFiles            LaborConsultationFile[]   @relation("question_labor_consultation")
  answerFiles              LaborConsultationFile[]   @relation("answer_labor_consultation")
  laborConsultationRequest LaborConsultationRequest?

  @@map("labor_consultations")
}

model LaborConsultationFile {
  id                          Int                @id @default(autoincrement())
  questionFileId              Int?               @unique @map("question_file_id")
  answerFileId                Int?               @unique @map("answer_file_id")
  questionLaborConsultationId Int?               @map("question_labor_consultation_id")
  answerLaborConsultationId   Int?               @map("answer_labor_consultation_id")
  questionLaborConsultation   LaborConsultation? @relation("question_labor_consultation", fields: [questionLaborConsultationId], references: [id])
  answerLaborConsultation     LaborConsultation? @relation("answer_labor_consultation", fields: [answerLaborConsultationId], references: [id])
  questionFile                File?              @relation("question_file", fields: [questionFileId], references: [id])
  answerFile                  File?              @relation("answer_file", fields: [answerFileId], references: [id], onDelete: Cascade)

  @@map("labor_consultation_files")
}

model LaborConsultationRequest {
  id                  Int               @id @default(autoincrement())
  companyId           Int               @map("company_id")
  laborConsultationId Int               @unique @map("labor_consultation_id")
  usageHistoryId      Int               @unique @map("usage_history_id")
  company             Company           @relation(fields: [companyId], references: [id])
  laborConsultation   LaborConsultation @relation(fields: [laborConsultationId], references: [id])
  usageHistory        UsageHistory      @relation(fields: [usageHistoryId], references: [id])

  @@map("labor_consultation_requests")
}

model Term {
  id        Int           @id @default(autoincrement())
  isActive  Boolean       @default(true) @map("is_active")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  title     String
  terms     TermVersion[]

  @@map("terms")
}

model TermVersion {
  id           Int      @id @default(autoincrement())
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  revisionDate DateTime @map("revision_date")
  content      String
  termId       Int      @map("term_id")
  term         Term     @relation(fields: [termId], references: [id])

  @@map("term_versions")
}

model Memo {
  id        Int      @id @default(autoincrement())
  memberId  Int
  member    Member   @relation(fields: [memberId], references: [id])
  startDate DateTime @map("start_date") @db.Date
  endDate   DateTime @map("end_date") @db.Date
  note      String?
  isActive  Boolean  @default(true) @map("is_active")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("memos")
}

model Faq {
  id           Int          @id @default(autoincrement())
  isActive     Boolean      @default(true) @map("is_active")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  inquirerType InquirerType @map("inquirer_type")
  category     FaqCategory
  question     String
  answer       String
  writer       String
  faqFiles     FaqFile[]

  @@map("faqs")
}

model FaqFile {
  id     Int  @id @default(autoincrement())
  faqId  Int  @map("faq_id")
  fileId Int  @unique @map("file_id")
  faq    Faq  @relation(fields: [faqId], references: [id])
  file   File @relation(fields: [fileId], references: [id])

  @@map("faq_files")
}

model MemberInformationRequest {
  id             Int          @id @default(autoincrement())
  memberId       Int          @map("member_id")
  companyId      Int          @map("company_id")
  usageHistoryId Int          @unique @map("usage_history_id")
  member         Member       @relation(fields: [memberId], references: [id])
  company        Company      @relation(fields: [companyId], references: [id])
  usageHistory   UsageHistory @relation(fields: [usageHistoryId], references: [id])

  @@map("member_information_requests")
}

enum PointStatus {
  REQUESTING
  APPROVED
  REJECTED
}

enum BannerStatus {
  HIDE
  EXPOSE
}

enum NotificationType {
  ACCOUNT
  TEAM
  SITE
  POST
  APPLICATION
  INTERVIEW
  CONTRACT
  SalaryHistory
  POINT
  CURRENCY_EXCHANGE
  HEADHUNTING
  MATCHING
  PRODUCT_PAYMENT
  LABOR_CONSULTATION
  INQUIRY
  OTHERS
}

enum ObjectStatus {
  APPROVED
}

enum RequestBannerStatus {
  PENDING
  DENY
  APPROVED
}

enum PostBannerType {
  ADMIN
  COMPANY
}

enum FunctionName {
  MEMBER_MANAGEMENT
  TEAM_MANAGEMENT
  COMPANY_MANAGEMENT
  SITE_MANAGEMENT
  ACCUMULATION_MANAGEMENT
  MATCHING_SETTINGS_MANAGEMENT
  THE_ONE_HEADHUNTING_MANAGEMENT
  NOTICE_MANAGEMENT
  APPLICATION_MANAGEMENT
  CONTRACT_MANAGEMENT
  WORK_MANAGEMENT
  EVALUATION_MANAGEMENT
  PRODUCT_PAYMENT_MANAGEMENT
  PRODUCT_POSSESSION_STATUS
  REFUND_MANAGEMENT
  SETTLEMENT_MANAGEMENT
  POINT_MANAGEMENT
  CURRENT_EXCHANGE_REQUEST_MANAGEMENT
  BANNER_MANAGEMENT
  BANNER_INQUIRY_MANAGEMENT
  CODE_MANAGEMENT
  ANNOUNCEMENTS
  FREQUENTLY_ASKED_QUESTIONS
  ONE_TO_ONE_INQUIRY
  TERMS_AND_CONDITIONS
  LABOR_CONSULTATION_MANAGEMENT
  REPORT_MANAGEMENT
  SALARY_REPORT_PROXY_APPLICATION
  ADMINISTRATOR_MANAGEMENT
}

enum AccountType {
  ADMIN
  COMPANY
  MEMBER
}

enum AccountStatus {
  APPROVED
  SUSPENDED
  WITHDRAWN
}

enum AdminLevel {
  SUPERADMIN
  GENERAL
}

enum MemberLevel {
  PLATINUM
  GOLD
  SILVER
  SECOND
  THIRD
}

enum CompanyType {
  CORPORATION
  INDIVIDUAL
  OTHER
}

enum FileType {
  PDF
  ZIP
  RAR
  JPEG
  PNG
  CSV
  EXCEL
  WORD
  JPG
  BMP
  GIF
}

enum TeamStatus {
  GENERAL
  STOPPED
  WAITING_FOR_ACTIVITY
}

enum CertificateStatus {
  REQUESTING
  REJECTED
  APPROVED
  REAPPLY
}

enum SignupMethodType {
  GENERAL
  GOOGLE
  APPLE
  KAKAO
  NAVER
}

enum CareerType {
  GENERAL
  CERTIFICATION
}

enum CareerCertificationType {
  NONE
  HEALTH_INSURANCE
  EMPLOYMENT_INSURANCE
  THE_ONE_SITE
}

enum OtpType {
  EMAIL
  PHONE
}

enum ContractStatus {
  PRIMARY
  SUB_CONTRACT
  DROP_BOX
}

enum PostType {
  COMMON
  PREMIUM
}

enum PostCategory {
  GENERAL
  MATCHING
  HEADHUNTING
}

enum PostStatus {
  PREPARE
  RECRUITING
  DEADLINE
}

enum ExperienceType {
  SHORT
  MEDIUM
  LONG
  REGARDLESS
}

enum SalaryType {
  DAILY
  MONTHLY
}

enum Workday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
  AGREEMENT
}

enum PostApplicationStatus {
  APPLY
  REJECT_BY_COMPANY
  PROPOSAL_INTERVIEW
  REJECT_BY_MEMBER
  APPROVE_BY_MEMBER
  APPROVE_BY_COMPANY
}

enum CareerCertificationRequestStatus {
  REQUESTING
  APPROVED
  REFUSED
}

enum SiteStatus {
  REVIEWING
  REJECTED
  APPROVED
  SUSPENDED
}

enum HeadhuntingRequestStatus {
  APPLY
  APPROVED
  REJECTED
  RE_APPLY
}

enum RequestObject {
  INDIVIDUAL
  TEAM
}

enum ApplicationCategory {
  NORMAL
  MATCHING
  HEADHUNTING
  MANPOWER
}

enum InterviewStatus {
  INTERVIEWING
  PASS
  FAIL
}

enum InvitationStatus {
  ACCEPTED
  REQUESTED
  DECLIENED
}

enum PostHistoryType {
  EDITED
  DELETED
}

enum PaymentForm {
  ON_SITE
  BANK_TRANSFER
}

enum PaymentType {
  CREDIT_CARD
  BANK_TRANSFER
}

enum ProductType {
  PULL_UP
  PREMIUM_POST
  WORKER_VERIFICATION
  LABOR_CONSULTATION
  BANNER
  HEADHUNTING_SERVICE
  COMPANY_MATCHING_SERVICE
}

enum UsageType {
  LIMITED_COUNT
  FIX_TERM
}

enum NotificationStatus {
  NOT_READ
  READ
}

enum BannerType {
  ADMIN
  COMPANY
}

enum SettlementStatus {
  UNSETTLED
  SETTLED
  REQUESTED
}

enum RefundStatus {
  APPLY
  APPROVED
  REJECT
}

enum TaxBillStatus {
  NOT_ISSUED
  ISSUED_REQUESTED
  ISSUED_COMPLETED
  MODIFIED_ISSUED_COMPLETED
}

enum CardReceiptStatus {
  IN_PROGRESS
}

enum PaymentStatus {
  PROCESSING
  COMPLETE
  FAIL
}

enum InquirerType {
  MEMBER
  COMPANY
}

enum InquiryType {
  USE_OF_SERVICES
  ACCOUNT
  CAREER
  MATCHING
  APPLICATION
  INTERVIEW
  CONTRACT
  LABOR
  WAGE
  OTHERS
}

enum LaborConsultationType {
  CONTRACT
  LABOR
  WAGE
  FOUR_MAJOR_INSURANCES
  SEVERANCE_PAY
  OTHERS
}

enum AnswerStatus {
  WAITING
  COMPLETE
}

enum ReportType {
  INTERVIEW
  CONTRACT
  LABOR
  WAGE
  OTHER
}

enum FaqCategory {
  CATEGORY1
  CATEGORY2
  CATEGORY3
  CATEGORY4
}

enum HeadhuntingPaymentStatus {
  COMPLETE_PAYMENT
  UN_PAID
}

enum HeadhuntingMatchingStatus {
  NOT_MATCHING
  MATCHING
}
