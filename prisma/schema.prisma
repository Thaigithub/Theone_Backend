generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                      Int                      @id @default(autoincrement())
  username                String                   @unique
  password                String
  type                    AccountType
  status                  AccountStatus
  isActive                Boolean                  @default(true)
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @updatedAt @map("updated_at")
  admin                   Admin?
  authenticationProviders AuthenticationProvider[]
  company                 Company?
  member                  Member?
  otp_providers           OtpProvider?

  @@map("accounts")
}

model OtpProvider {
  id         Int       @id @default(autoincrement())
  updatedAt  DateTime? @updatedAt @map("updated_at")
  otpCode    String?   @map("otp_code")
  account_id Int       @unique
  accounts   Account   @relation(fields: [account_id], references: [id])

  @@map("otp_providers")
}

model Admin {
  id          Int           @id @default(autoincrement())
  name        String
  level       AdminLevel
  accountId   Int           @unique @map("account_id")
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  account     Account       @relation(fields: [accountId], references: [id])
  permissions permissions[]

  @@map("admins")
}

model Member {
  id                 Int              @id @default(autoincrement())
  name               String
  accountId          Int              @unique @map("account_id")
  isActive           Boolean          @default(true)
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  contact            String
  level              MemberLevel
  disabled           DisabledType
  withdrawDate       DateTime?        @db.Date
  bankName           String?
  accountNumber      String?
  authenticationDate DateTime?        @db.Date
  registrationNumber String?
  serialNumber       String?
  dateOfIssue        DateTime?        @db.Date
  Certificate        Certificate[]
  account            Account          @relation(fields: [accountId], references: [id])
  teams              MembersOnTeams[]
  leader             Team[]

  @@map("members")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  accountId Int      @unique @map("account_id")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String?
  account   Account  @relation(fields: [accountId], references: [id])

  @@map("companies")
}

model Team {
  id        Int              @id @default(autoincrement())
  code      String
  name      String
  leaderId  Int              @map("leader_id")
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  status    TeamStatus
  members   MembersOnTeams[]
  leader    Member           @relation(fields: [leaderId], references: [id])

  @@map("teams")
}

model MembersOnTeams {
  teamId    Int      @map("team_id")
  memberId  Int      @map("member_id")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  member    Member   @relation(fields: [memberId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@id([memberId, teamId])
  @@map("members_on_teams")
}

model AuthenticationProvider {
  id        Int                        @id @default(autoincrement())
  key       String
  type      AuthenticationProviderType
  isActive  Boolean                    @default(true)
  createdAt DateTime                   @default(now()) @map("created_at")
  updatedAt DateTime                   @updatedAt @map("updated_at")
  accountId Int                        @map("account_id")
  account   Account                    @relation(fields: [accountId], references: [id])

  @@map("authentication_providers")
}

model File {
  id            Int      @id @default(autoincrement())
  type          FileType
  key           String?
  fileName      String?  @map("file_name")
  size          BigInt
  isDeactivated Boolean  @default(false) @map("is_deactivated")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("files")
}

model Certificate {
  id              Int               @id @default(autoincrement())
  name            String
  photo           String
  status          CertificateStatus
  acquisitionDate DateTime          @map("acquisition_date")
  createdAt       DateTime          @default(now()) @map("created_at")
  memberId        Int               @map("member_id")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  member          Member            @relation(fields: [memberId], references: [id])
}

model functions {
  id          Int          @id @default(autoincrement())
  name        FunctionName
  created_at  DateTime     @default(now())
  updated_at  DateTime
  permissions permissions?
}

model permissions {
  id          Int       @id @default(autoincrement())
  admin_id    Int
  function_id Int       @unique
  admins      Admin     @relation(fields: [admin_id], references: [id])
  functions   functions @relation(fields: [function_id], references: [id])
}

enum AccountType {
  ADMIN
  COMPANY
  MEMBER
}

enum AccountStatus {
  PENDING
  APPROVED
  SUSPENDED
  WITHDRAWN
}

enum AdminLevel {
  SUPERADMIN
  GENERAL
}

enum AuthenticationProviderType {
  KAKAO
  NAVER
  GOOGLE
  APPLE
  FACEBOOK
}

enum MemberLevel {
  PLATINUM
  GOLD
  SIVER
  TWO
  THREE
}

enum FileType {
  PDF
  ZIP
  RAR
  JPEG
  PNG
  CSV
  EXCEL
  WORD
}

enum TeamStatus {
  GENERAL
  STOPPED
  NOT_EXPOSED
  WAITING_ACTIVITY
  DELETED
}

enum DisabledType {
  DISABLED
  NONE
  MODERATE
}

enum CertificateStatus {
  REQUESTING
  REJECTED
  APPROVED
  REAPPLY
}

enum FunctionName {
  MEMBER_MANAGEMENT
  TEAM_MANAGEMENT
  COMPANY_LIST
  SPECIAL_APPLICATION
  CERTIFICATION_APPLICATION
  DISABLED_REGISTRATION
  CAREER_REGISTRATION
  SITE_APPLICATION
  ANNOUNCEMENT_MANAGEMENT
  GENERAL_SUPPORT_MANAGEMENT
  MATCHING_SETTING_MANAGEMENT
  MATCHING_SETTING
  HEADHUNTING_REQUEST
  HEADHUNTING_MANAGEMENT
  HEADHUNTING_MANPOWER
  CONTRACT_MANAGEMENT
  EVALUATION_MANAGEMENT
  PRODUCT_PAYMENT_MANAGEMENT
  PRODUCT_POSSESSION_STATUS
  PRODUCT_USAGE_STATUS
  REFUND_MANAGEMENT
  SETTLEMENT_MANAGEMENT
  POINT_MANAGEMENT
  BANNER_MANAGEMENT
  PRODUCT_BANNER_MANAGEMENT
  PRODUCT_BANNER_INQUIRY
  CODE_MANAGEMENT
  ADVERTISING_BANNER_MANAGEMENT
  ANNOUNCEMENTS
  FAQ
  INQUIRY
  TERMS_AND_CONDITIONS
  LABOR_CONSULTATION_MANAGEMENT
  REPORT_MANAGEMENT
  SALARY_REPORT_PROXY_APPLICATION
  ADMINISTRATOR_MANAGEMENT
}
