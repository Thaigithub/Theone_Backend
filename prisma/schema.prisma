generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                     Int                    @id @default(autoincrement())
  username               String                 @unique
  password               String
  type                   AccountType
  status                 AccountStatus
  isActive               Boolean                @default(true) @map("is_active")
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  lastAccessAt           DateTime               @default(now()) @map("last_access_at")
  accountStatusHistories AccountStatusHistory[]
  admin                  Admin?
  company                Company?
  member                 Member?
  otps                   OtpProvider[]

  @@map("accounts")
}

model AccountStatusHistory {
  id        Int           @id @default(autoincrement())
  accountId Int           @map("account_id")
  status    AccountStatus
  message   String        @default("")
  isActive  Boolean       @default(true) @map("is_active")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  account   Account       @relation(fields: [accountId], references: [id])

  @@map("account_status_histories")
}

model OtpProvider {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt @map("updated_at")
  otpCode   String?  @map("otp_code")
  checked   Boolean  @default(false)
  accountId Int      @map("account_id")
  otpType   OtpType  @map("otp_type")
  account   Account  @relation(fields: [accountId], references: [id])

  @@map("otp_providers")
}

model Admin {
  id          Int          @id @default(autoincrement())
  name        String
  level       AdminLevel
  accountId   Int          @unique @map("account_id")
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  account     Account      @relation(fields: [accountId], references: [id])
  permissions Permission[]

  @@map("admins")
}

model Member {
  id                           Int                           @id @default(autoincrement())
  name                         String
  accountId                    Int                           @unique @map("account_id")
  isActive                     Boolean                       @default(true) @map("is_active")
  createdAt                    DateTime                      @default(now()) @map("created_at")
  updatedAt                    DateTime                      @updatedAt @map("updated_at")
  region                       String?
  longitude                    String?
  latitude                     String?
  contact                      String?
  email                        String?                       @unique
  desiredOccupation            String?                       @map("desired_occupation")
  totalExperienceYears         Int?                          @map("total_experience_years")
  totalExperienceMonths        Int?                          @map("total_experience_months")
  desiredSalary                String?                       @map("desired_salary")
  signupMethod                 SignupMethodType              @map("signup_method")
  level                        MemberLevel
  withdrawnDate                DateTime?                     @map("withdrawn_date") @db.Date
  applyPosts                   Application[]
  bankAccount                  BankAccount?
  career                       Career[]
  certificates                 Certificate[]
  disability                   Disability?
  foreignWorker                ForeignWorker?
  headhuntingRecommendation    HeadhuntingRecommendation[]
  basicHealthSafetyCertificate BasicHealthSafetyCertificate?
  interestSites                Interest[]
  memberEvaluation             MemberEvaluation?
  account                      Account                       @relation(fields: [accountId], references: [id])
  teams                        MembersOnTeams[]
  siteEvaluationByMember       SiteEvaluationByMember?
  specialLicenses              SpecialLicense[]
  leader                       Team[]
  matchingRecommendation       MatchingRecommendation[]

  @@map("members")
}

model Company {
  id                     Int                      @id @default(autoincrement())
  accountId              Int                      @unique @map("account_id")
  name                   String
  address                String
  longitude              Float
  latitude               Float
  estDate                DateTime                 @map("est_date")
  businessRegNumber      String                   @unique @map("buss_reg_number")
  corporateRegNumber     String                   @unique @map("corp_reg_number")
  type                   CompanyType
  email                  String                   @unique
  phone                  String
  contactPhone           String                   @map("contact_phone")
  contactName            String                   @map("contact_name")
  isActive               Boolean                  @default(true) @map("is_active")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  presentativeName       String                   @map("presentative_name")
  account                Account                  @relation(fields: [accountId], references: [id])
  contactCard            ContactCard?
  logo                   Logo?
  posts                  Post[]
  sites                  Site[]
  matchingRecommendation MatchingRecommendation[]

  @@map("companies")
}

model Logo {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique @map("company_id")
  fileId    Int     @unique @map("file_id")
  company   Company @relation(fields: [companyId], references: [id])
  file      File    @relation(fields: [fileId], references: [id])

  @@map("logos")
}

model ContactCard {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique @map("company_id")
  fileId    Int     @unique @map("file_id")
  company   Company @relation(fields: [companyId], references: [id])
  file      File    @relation(fields: [fileId], references: [id])

  @@map("contact_cards")
}

model Team {
  id                        Int                         @id @default(autoincrement())
  code                      String?
  name                      String
  introduction              String?
  region                    String?
  leaderId                  Int                         @map("leader_id")
  isActive                  Boolean                     @default(true) @map("is_active")
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  status                    TeamStatus                  @default(GENERAL)
  totalMembers              Int                         @default(0) @map("total_members")
  fileId                    Int                         @unique @map("file_id")
  exposureStatus            Boolean                     @default(false) @map("exposure_status")
  numberOfRecruitments      Int                         @default(0) @map("number_of_recruitments")
  posts                     Application[]
  headhuntingRecommendation HeadhuntingRecommendation[]
  members                   MembersOnTeams[]
  teamEvaluation            TeamEvaluation?
  file                      File                        @relation(fields: [fileId], references: [id])
  leader                    Member                      @relation(fields: [leaderId], references: [id])
  totalExperienceYears      Int?                        @map("total_experience_years")
  totalExperienceMonths     Int?                        @map("total_experience_months")
  matchingRecommendation    MatchingRecommendation[]

  @@map("teams")
}

model MembersOnTeams {
  teamId    Int      @map("team_id")
  memberId  Int      @map("member_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  member    Member   @relation(fields: [memberId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@id([memberId, teamId])
  @@map("members_on_teams")
}

model ForeignWorker {
  id                 Int      @id @default(autoincrement())
  englishName        String   @map("english_name")
  registrationNumber String   @map("registration_number")
  serialNumber       String   @map("serial_number")
  dateOfIssue        DateTime @map("date_of_issue") @db.Date
  memberId           Int      @unique @map("member_id")
  fileId             Int      @unique @map("file_id")
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  file               File     @relation(fields: [fileId], references: [id])
  member             Member   @relation(fields: [memberId], references: [id])

  @@map("foreign_workers")
}

model BankAccount {
  id            Int      @id @default(autoincrement())
  accountHolder String   @map("account_holder")
  accountNumber String   @map("account_number")
  bankName      String   @map("bank_name")
  memberId      Int      @unique @map("member_id")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  member        Member   @relation(fields: [memberId], references: [id])

  @@map("bank_accounts")
}

model Disability {
  id           Int           @id @default(autoincrement())
  disableType  DisabledType  @map("disable_type")
  disableLevel DisabledLevel
  memberId     Int           @unique @map("member_id")
  fileId       Int           @unique @map("file_id")
  isActive     Boolean       @default(true) @map("is_active")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  file         File          @relation(fields: [fileId], references: [id])
  member       Member        @relation(fields: [memberId], references: [id])

  @@map("disabilities")
}

model BasicHealthSafetyCertificate {
  id                 Int      @id @default(autoincrement())
  registrationNumber String   @map("registration_number")
  dateOfCompletion   DateTime @map("date_of_completion") @db.Date
  memberId           Int      @unique @map("member_id")
  fileId             Int      @unique @map("file_id")
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  file               File     @relation(fields: [fileId], references: [id])
  member             Member   @relation(fields: [memberId], references: [id])

  @@map("hst_certificates")
}

model File {
  id                           Int                           @id @default(autoincrement())
  type                         FileType
  key                          String?
  fileName                     String?                       @map("file_name")
  size                         BigInt
  isDeactivated                Boolean                       @default(false) @map("is_deactivated")
  createdAt                    DateTime                      @default(now()) @map("created_at")
  updatedAt                    DateTime                      @updatedAt @map("updated_at")
  banner                       Banner?
  certificate                  Certificate?
  contactCard                  ContactCard?
  contract                     Contract?
  disability                   Disability?
  foreignWorker                ForeignWorker?
  basicHealthSafetyCertificate BasicHealthSafetyCertificate?
  logo                         Logo?
  specialLicense               SpecialLicense?
  team                         Team?

  @@map("files")
}

model Permission {
  adminId    Int      @map("admin_id")
  functionId Int      @map("function_id")
  admin      Admin    @relation(fields: [adminId], references: [id])
  function   Function @relation(fields: [functionId], references: [id])

  @@id([adminId, functionId])
  @@map("permissions")
}

model Function {
  id         Int          @id @default(autoincrement())
  name       FunctionName
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  permission Permission[]

  @@map("functions")
}

model Certificate {
  id                Int               @id @default(autoincrement())
  name              String
  status            CertificateStatus @default(REQUESTING)
  certificateNumber String            @map("certificate_number")
  acquisitionDate   DateTime          @map("acquisition_date")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  memberId          Int               @map("member_id")
  fileId            Int               @unique @map("file_id")
  isSpecial         Boolean           @default(false)
  codeId            Int?              @map("code_id")
  code              Code?             @relation(fields: [codeId], references: [id])
  file              File              @relation(fields: [fileId], references: [id])
  member            Member            @relation(fields: [memberId], references: [id])

  @@map("certificates")
}

model SpecialLicense {
  id              Int               @id @default(autoincrement())
  name            String
  status          CertificateStatus @default(REQUESTING)
  licenseNumber   String            @map("license_number")
  acquisitionDate DateTime          @map("acquisition_date")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  memberId        Int               @map("member_id")
  codeId          Int?              @map("code_id")
  fileId          Int               @unique @map("file_id")
  code            Code?             @relation(fields: [codeId], references: [id])
  file            File              @relation(fields: [fileId], references: [id])
  member          Member            @relation(fields: [memberId], references: [id])

  @@map("special_license")
}

model Career {
  id                Int        @id @default(autoincrement())
  companyName       String     @map("company_name")
  siteName          String     @map("site_name")
  startDate         DateTime   @map("start_date")
  endDate           DateTime   @map("end_date")
  type              CareerType
  isExperienced     Boolean    @map("is_experienced")
  experiencedYears  Int        @default(0)
  experiencedMonths Int        @default(0)
  occupationId      Int?
  isActive          Boolean    @default(true) @map("is_active")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  memberId          Int        @map("member_id")
  member            Member     @relation(fields: [memberId], references: [id])
  occupation        Code?      @relation(fields: [occupationId], references: [id])

  @@map("careers")
}

model Banner {
  id            Int            @id @default(autoincrement())
  status        BannerStatus   @default(EXPOSE)
  fileId        Int            @unique
  isActive      Boolean        @default(true) @map("is_active")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  file          File           @relation(fields: [fileId], references: [id])
  generalBanner GeneralBanner?
  postBanner    PostBanner?
  siteBanner    SiteBanner?

  @@map("banners")
}

model GeneralBanner {
  id        Int      @unique
  urlLink   String   @map("url_link")
  title     String
  startDate DateTime @map("start_date") @db.Date
  endDate   DateTime @map("end_date") @db.Date
  regDate   DateTime @default(now()) @map("register_date") @db.Date
  priority  Int?
  banner    Banner   @relation(fields: [id], references: [id])

  @@map("general_banners")
}

model PostBanner {
  id                Int                @unique
  postId            Int                @map("post_id")
  type              PostBannerType
  adminPostBanner   AdminPostBanner?
  companyPostBanner CompanyPostBanner?
  banner            Banner             @relation(fields: [id], references: [id])
  post              Post               @relation(fields: [postId], references: [id])

  @@map("post_banners")
}

model CompanyPostBanner {
  id               Int                 @unique
  requestDate      DateTime            @map("request_date") @db.Date
  acceptDate       DateTime?           @map("accept_date") @db.Date
  desiredStartDate DateTime            @map("desired_start_date") @db.Date
  desiredEndDate   DateTime            @map("desired_end_date") @db.Date
  priority         Int?
  status           RequestBannerStatus
  postBanner       PostBanner          @relation(fields: [id], references: [id])

  @@map("company_post_banners")
}

model AdminPostBanner {
  id         Int        @unique
  urlLink    String     @map("url_link")
  startDate  DateTime   @map("start_date") @db.Date
  endDate    DateTime   @map("end_date") @db.Date
  regDate    DateTime   @map("register_date") @db.Date
  priority   Int?       @unique
  postBanner PostBanner @relation(fields: [id], references: [id])

  @@map("admin_post_banners")
}

model SiteBanner {
  id               Int                 @unique
  siteId           Int                 @map("site_id")
  title            String
  requestDate      DateTime            @map("request_date") @db.Date
  acceptDate       DateTime?           @map("accept_date") @db.Date
  desiredStartDate DateTime            @map("desired_start_date") @db.Date
  desiredEndDate   DateTime            @map("desired_end_date") @db.Date
  priority         Int?                @unique
  status           RequestBannerStatus
  banner           Banner              @relation(fields: [id], references: [id])
  site             Site                @relation(fields: [siteId], references: [id])

  @@map("site_banners")
}

model Code {
  id             Int              @id @default(autoincrement())
  isActive       Boolean          @default(true) @map("is_active")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  code           String           @unique
  codeName       String           @map("code_name")
  codeType       CodeType         @map("code_type")
  career         Career[]
  certificate    Certificate[]
  asJob          Post[]           @relation("post_occupation")
  asSpecial      Post[]           @relation("post_special")
  specialLicense SpecialLicense[]

  @@map("codes")
}

model Site {
  id                        Int                        @id @default(autoincrement())
  isActive                  Boolean                    @default(true) @map("is_active")
  createdAt                 DateTime                   @default(now()) @map("created_at")
  updatedAt                 DateTime                   @updatedAt @map("updated_at")
  status                    SiteStatus                 @default(REVIEWING)
  type                      SiteType                   @default(REGISTERED)
  name                      String?
  address                   String?
  longitude                 Float?
  latitude                  Float?
  contact                   String?
  personInCharge            String?                    @map("person_in_charge")
  personInChargeContact     String?                    @map("person_in_charge_contact")
  originalBuilding          String?                    @map("original_building")
  email                     String?
  taxInvoiceEmail           String?                    @map("tax_invoice_email")
  siteManagementNumber      String?                    @map("site_management_number")
  contractStatus            ContractStatus?            @map("contract_status")
  startDate                 DateTime?                  @map("start_date") @db.Date
  endDate                   DateTime?                  @map("end_date") @db.Date
  companyId                 Int                        @map("company_id")
  numberOfContract          Int                        @default(0)
  addressCity               String?                    @map("address_city")
  addressDistrict           String?                    @map("address_district")
  interestMember            Interest[]
  memberEvaluationByCompany MemberEvaluationByCompany?
  post                      Post[]
  siteBanner                SiteBanner[]
  siteEvaluation            SiteEvaluation?
  company                   Company                    @relation(fields: [companyId], references: [id])
  teamEvaluationByCompany   TeamEvaluationByCompany?

  @@map("sites")
}

model Post {
  id                        Int                         @id @default(autoincrement())
  isActive                  Boolean                     @default(true) @map("is_active")
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  isPulledUp                Boolean                     @default(false) @map("is_pulled_up")
  isHidden                  Boolean                     @default(false) @map("is_hidden")
  type                      PostType
  category                  PostCategory
  status                    PostStatus
  name                      String
  startDate                 DateTime                    @map("start_date") @db.Date
  endDate                   DateTime                    @map("end_date") @db.Date
  experienceType            ExperienceType              @map("experience_type")
  numberOfPeople            Int                         @map("number_of_people")
  otherInformation          String                      @map("other_information")
  salaryType                SalaryType?                 @map("salary_type")
  salaryAmount              Int?                        @map("salary_amount")
  startWorkDate             DateTime?                   @map("start_work_date") @db.Date
  endWorkDate               DateTime?                   @map("end_work_date") @db.Date
  workday                   Workday[]
  startWorkTime             DateTime?                   @map("start_work_time") @db.Time(6)
  endWorkTime               DateTime?                   @map("end_work_time") @db.Time(6)
  postEditor                String?                     @map("post_editor")
  view                      Int                         @default(0)
  workLocation              String?                     @map("work_location")
  companyId                 Int                         @map("company_id")
  deleteReason              String?                     @map("delete_reason")
  occupationId              Int?                        @map("occupation_id")
  siteId                    Int?                        @map("site_id")
  specialNoteId             Int?                        @map("special_note_id")
  applicants                Application[]
  headhuntingRecommendation HeadhuntingRecommendation[]
  headhuntingRequest        HeadhuntingRequest[]
  interested                Interest[]
  postBanner                PostBanner[]
  company                   Company                     @relation(fields: [companyId], references: [id])
  occupation                Code?                       @relation("post_occupation", fields: [occupationId], references: [id])
  site                      Site?                       @relation(fields: [siteId], references: [id])
  specialNote               Code?                       @relation("post_special", fields: [specialNoteId], references: [id])

  @@map("posts")
}

model SiteEvaluation {
  id                     Int                      @id @default(autoincrement())
  isActive               Boolean                  @default(true) @map("is_active")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  totalEvaluators        Int                      @default(0) @map("total_evaluator")
  totalScore             Int?                     @map("total_score")
  averageScore           Float?                   @map("average_score") @db.Real
  siteId                 Int                      @unique @map("site_id")
  site                   Site                     @relation(fields: [siteId], references: [id])
  siteEvaluationByMember SiteEvaluationByMember[]

  @@map("site_evaluations")
}

model SiteEvaluationByMember {
  id               Int            @id @default(autoincrement())
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  score            Int?           @db.SmallInt
  siteEvaluationId Int            @map("site_evaluation_id")
  memberId         Int            @unique @map("member_id")
  member           Member         @relation(fields: [memberId], references: [id])
  siteEvaluation   SiteEvaluation @relation(fields: [siteEvaluationId], references: [id])

  @@map("site_evaluations_by_member")
}

model Interest {
  id         Int      @id @default(autoincrement())
  memberId   Int      @map("member_id")
  siteId     Int?     @map("site_id")
  postId     Int?     @map("post_id")
  assignedAt DateTime @default(now())
  member     Member   @relation(fields: [memberId], references: [id])
  post       Post?    @relation(fields: [postId], references: [id])
  site       Site?    @relation(fields: [siteId], references: [id])

  @@unique([memberId, postId])
  @@unique([memberId, siteId])
  @@map("interests")
}

model Application {
  id         Int                   @id @default(autoincrement())
  memberId   Int?                  @map("member_id")
  teamId     Int?                  @map("team_id")
  postId     Int                   @map("post_id")
  status     PostApplicationStatus @default(APPLY)
  assignedAt DateTime              @default(now())
  updatedAt  DateTime              @updatedAt @map("updated_at")
  member     Member?               @relation(fields: [memberId], references: [id])
  post       Post                  @relation(fields: [postId], references: [id])
  team       Team?                 @relation(fields: [teamId], references: [id])
  contract   Contract?
  interview  Interview?

  @@unique([memberId, postId])
  @@unique([teamId, postId])
  @@map("applications")
}

model TeamEvaluation {
  id                      Int                       @id @default(autoincrement())
  isActive                Boolean                   @default(true) @map("is_active")
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @updatedAt @map("updated_at")
  totalEvaluators         Int                       @default(0) @map("total_evaluator")
  totalScore              Int?                      @map("total_score")
  averageScore            Float?                    @map("average_score") @db.Real
  teamId                  Int                       @unique @map("team_id")
  team                    Team                      @relation(fields: [teamId], references: [id])
  teamEvaluationByCompany TeamEvaluationByCompany[]

  @@map("team_evaluations")
}

model TeamEvaluationByCompany {
  id               Int            @id @default(autoincrement())
  isActive         Boolean        @default(true) @map("is_active")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  score            Int?           @db.SmallInt
  teamEvaluationId Int            @map("team_evaluation_id")
  siteId           Int            @unique @map("site_id")
  site             Site           @relation(fields: [siteId], references: [id])
  teamEvaluation   TeamEvaluation @relation(fields: [teamEvaluationId], references: [id])

  @@map("team_evaluations_by_company")
}

model MemberEvaluation {
  id                        Int                         @id @default(autoincrement())
  isActive                  Boolean                     @default(true) @map("is_active")
  createdAt                 DateTime                    @default(now()) @map("created_at")
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  totalEvaluators           Int                         @default(0) @map("total_evaluator")
  totalScore                Int?                        @map("total_score")
  averageScore              Float?                      @map("average_score") @db.Real
  memberId                  Int                         @unique @map("member_id")
  member                    Member                      @relation(fields: [memberId], references: [id])
  memberEvaluationByCompany MemberEvaluationByCompany[]

  @@map("member_evaluations")
}

model MemberEvaluationByCompany {
  id                 Int              @id @default(autoincrement())
  isActive           Boolean          @default(true) @map("is_active")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  score              Int?             @db.SmallInt
  memberEvaluationId Int              @map("member_evaluation_id")
  siteId             Int              @unique @map("site_id")
  memberEvaluation   MemberEvaluation @relation(fields: [memberEvaluationId], references: [id])
  site               Site             @relation(fields: [siteId], references: [id])

  @@map("member_evaluations_by_company")
}

model HeadhuntingRequest {
  id           Int           @id @default(autoincrement())
  isActive     Boolean       @default(true) @map("is_active")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  postId       Int           @unique
  date         DateTime      @default(now()) @db.Date
  status       RequestStatus
  object       RequestObject
  detail       String        @default("")
  rejectReason String        @default("") @map("reject_reason")
  post         Post          @relation(fields: [postId], references: [id])

  @@map("headhunting_requests")
}

model Interview {
  id                   Int             @id @default(autoincrement())
  isActive             Boolean         @default(true) @map("is_active")
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")
  supportCategory      SupportCategory @map("interview_category")
  applicationId        Int             @unique
  interviewStatus      InterviewStatus @map("interview_status")
  interviewRequestDate DateTime        @default(now()) @map("interview_request_date") @db.Date
  application          Application     @relation(fields: [applicationId], references: [id])

  @@map("interviews")
}

model HeadhuntingRecommendation {
  id         Int      @id @default(autoincrement())
  memberId   Int?     @map("member_id")
  teamId     Int?     @map("team_id")
  postId     Int      @map("post_id")
  assignedAt DateTime @default(now()) @map("assigned_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  member     Member?  @relation(fields: [memberId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])
  team       Team?    @relation(fields: [teamId], references: [id])

  @@unique([memberId, postId])
  @@unique([teamId, postId])
  @@map("headhunting_recommendations")
}

model Contract {
  id             Int         @id @default(autoincrement())
  contractNumber String      @unique @map("contract_number")
  paymentForm    PaymentForm @default(FIRST_CLASS) @map("payment_form")
  amount         Int         @default(0)
  startDate      DateTime    @map("start_date") @db.Date
  endDate        DateTime    @map("end_date") @db.Date
  fileId         Int         @unique @map("file_id")
  applicationId  Int         @unique @map("application_id")
  application    Application @relation(fields: [applicationId], references: [id])
  file           File        @relation(fields: [fileId], references: [id])

  @@map("contracts")
}

model City {
  id          Int        @id @default(autoincrement())
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")
  koreanName  String     @map("korean_name")
  englishName String     @map("english_name")
  district    District[]

  @@map("city")
}

model District {
  id          Int      @id @default(autoincrement())
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  koreanName  String   @map("korean_name")
  englishName String   @map("english_name")
  city        City     @relation(fields: [cityId], references: [id])
  cityId      Int      @map("city_id")

  @@map("district")
}

model MatchingRecommendation {
  id         Int      @id @default(autoincrement())
  memberId   Int?     @map("member_id")
  teamId     Int?     @map("team_id")
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Date()
  updatedAt  DateTime @updatedAt @map("updated_at")
  member     Member?  @relation(fields: [memberId], references: [id])
  team       Team?    @relation(fields: [teamId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  Int      @map("company_id")

  @@unique([memberId, assignedAt])
  @@unique([teamId, assignedAt])
  @@map("matching_recommendations")
}

enum BannerStatus {
  HIDE
  EXPOSE
}

enum RequestBannerStatus {
  PENDING
  DENY
  APPROVED
  REAPPLY
}

enum PostBannerType {
  ADMIN
  COMPANY
}

enum PaymentForm {
  FIRST_CLASS
}

enum ApplicationContractStatus {
  UNDER_CONTRACT
  CONTRACT_TERMINATED
}

enum FunctionName {
  MEMBER_MANAGEMENT
  TEAM_MANAGEMENT
  COMPANY_MANAGEMENT
  MATCHING_SETTINGS_MANAGEMENT
  THE_ONE_HEADHUNTING_MANAGEMENT
  NOTICE_MANAGEMENT
  APPLICATION_MANAGEMENT
  CONTRACT_MANAGEMENT
  WORK_MANAGEMENT
  EVALUATION_MANAGEMENT
  PRODUCT_PAYMENT_MANAGEMENT
  PRODUCT_POSSESSION_STATUS
  REFUND_MANAGEMENT
  SETTLEMENT_MANAGEMENT
  POINT_MANAGEMENT
  CURRENT_EXCHANGE_REQUEST_MANAGEMENT
  BANNER_MANAGEMENT
  BANNER_INQUIRY_MANAGEMENT
  CODE_MANAGEMENT
  ANNOUNCEMENTS
  FREQUENTLY_ASKED_QUESTIONS
  ONE_TO_ONE_INQUIRY
  TERMS_AND_CONDITIONS
  LABOR_CONSULTATION_MANAGEMENT
  REPORT_MANAGEMENT
  SALARY_REPORT_PROXY_APPLICATION
  ADMINISTRATOR_MANAGEMENT
}

enum AccountType {
  ADMIN
  COMPANY
  MEMBER
}

enum AccountStatus {
  PENDING
  APPROVED
  SUSPENDED
  WITHDRAWN
}

enum AdminLevel {
  SUPERADMIN
  GENERAL
}

enum MemberLevel {
  PLATINUM
  GOLD
  SILVER
  SECOND
  THIRD
}

enum CompanyType {
  CORPORATION
  INDIVIDUAL
  OTHER
}

enum FileType {
  PDF
  ZIP
  RAR
  JPEG
  PNG
  CSV
  EXCEL
  WORD
}

enum TeamStatus {
  GENERAL
  STOPPED
  NOT_EXPOSED
  WAITING_FOR_ACTIVITY
  DELETED
}

enum DisabledType {
  BURN
  NONE
  VISION_IMPAIRMENT
  VISUAL_FIELD_EFFECT
  HEARING_IMPAIRMENT
  BALANCE_DYSFUNCTION
  SPEECH_IMPEDIMENT
  ABSTRACTION_OF_FACTIAL_AREA
  DEPRESSION
  DISORDERS_CAUSE_BY_DEFORMITIES
}

enum DisabledLevel {
  MILD
  SEVERE
}

enum CertificateStatus {
  REQUESTING
  REJECTED
  APPROVED
  REAPPLY
}

enum SignupMethodType {
  GENERAL
  GOOGLE
  APPLE
  KAKAO
  NAVER
}

enum CareerType {
  GENERAL
  CERTIFICATION
}

enum OtpType {
  EMAIL
  PHONE
}

enum CodeType {
  SPECIAL_NOTE
  JOB
}

enum ContractStatus {
  PRIMARY
  SUB_CONTRACT
  DROP_BOX
}

enum PostType {
  COMMON
  PREMIUM
}

enum PostCategory {
  GENERAL
  MATCHING
  HEADHUNTING
}

enum PostStatus {
  PREPARE
  RECRUITING
  DEADLINE
}

enum ExperienceType {
  SHORT
  MEDIUM
  LONG
  REGARDLESS
}

enum SalaryType {
  HOURLY
  FIRST_CLASS
  SALARY
}

enum Workday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
  AGREEMENT
}

enum PostApplicationStatus {
  APPLY
  REJECT_BY_COMPANY
  PROPOSAL_INTERVIEW
  REJECT_BY_MEMBER
  APPROVE_BY_MEMBER
  APPROVE_BY_COMPANY
}

enum SiteStatus {
  REVIEWING
  REJECTED
  IN_PROGRESS
  EXPIRED
}

enum RequestStatus {
  APPLY
  APPROVED
  REJECTED
  RE_APPLY
}

enum RequestObject {
  INDIVIDUAL
  TEAM
}

enum SupportCategory {
  NORMAL
  MATCHING
  HEADHUNTING
  MANPOWER
}

enum InterviewStatus {
  INTERVIEWING
  PASS
  FAIL
}

enum SiteType {
  REGISTERED
  UNREGISTERED
}
