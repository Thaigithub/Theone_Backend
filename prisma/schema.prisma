// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  ADMIN
  COMPANY
  CUSTOMER
}

enum AccountStatus {
  PENDING
  APPROVED
  SUSPENDED
  WITHDRAWN
}

enum AdminLevel {
  SUPERADMIN
  GENERAL
}
enum CompanyType {
  CORPORATION
  INDIVIDUAL
  OTHER
}
// enum AuthenticationProviderType {
//   KAKAO
//   NAVER
//   GOOGLE
//   APPLE
//   FACEBOOK
// }

model Account {
  id              Int     @id @default(autoincrement())
  username        String  @unique
  password        String
  type            AccountType
  status          AccountStatus
  admin           Admin?
  member          Member?
  company         Company?
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // authenticationProviders AuthenticationProvider[]

  @@map("accounts")
}

model Admin {
  id              Int     @id @unique @map("account_id")
  account         Account @relation(fields: [id], references: [id])
  name            String
  level           AdminLevel
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model Member {
  id              Int     @id @unique @map("account_id")
  account         Account @relation(fields: [id], references: [id])
  name            String
  leader          Team[]
  teams           MembersOnTeams[]
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("members")
}

model Company { 
  id              Int     @id @unique @map("account_id")
  account         Account @relation(fields: [id], references: [id])
  name            String
  address         String
  estDate         DateTime @map("est_date")
  businessRegNumber         String @unique @map("buss_reg_number")
  corporateRegNumber        String @unique @map("corp_reg_number")
  type            CompanyType
  email           String @unique
  phone           String
  presentativeName          String @map("pres_name")
  contactPhone    String @map("contact_phone")
  contactName     String @map("contact_name")
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  @@map("companies")
}

model Team {
  id              Int     @id @default(autoincrement())
  code            String
  name            String
  leaderId        Int     @map("leader_id")
  leader          Member  @relation(fields: [leaderId], references: [id])
  members         MembersOnTeams[]
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("teams")
}

model MembersOnTeams {
  team            Team  @relation(fields: [teamId], references: [id])
  teamId          Int @map("team_id")
  member          Member @relation(fields: [memberId], references: [id])
  memberId        Int @map("member_id")
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("members_on_teams")
  @@id([memberId, teamId])
}


// model AuthenticationProvider {
//   id              Int     @id @default(autoincrement())
//   key             String
//   type            AuthenticationProviderType
//   accountId       Int @map("account_id")
//   isActive        Boolean @default(true)
//   createdAt       DateTime @default(now()) @map("created_at")
//   updatedAt       DateTime @updatedAt @map("updated_at")

//   account         Account @relation(fields: [accountId], references: [id])

//   @@map("authentication_providers")
// }
